{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/utils/CryptoUtils.ts", "../../src/utils/Logger.ts", "../../src/utils/Event.ts", "../../src/utils/JwtUtils.ts", "../../src/utils/PopupUtils.ts", "../../src/utils/Timer.ts", "../../src/utils/UrlUtils.ts", "../../src/errors/ErrorResponse.ts", "../../src/errors/ErrorTimeout.ts", "../../src/AccessTokenEvents.ts", "../../src/CheckSessionIFrame.ts", "../../src/InMemoryWebStorage.ts", "../../src/JsonService.ts", "../../src/MetadataService.ts", "../../src/WebStorageStateStore.ts", "../../src/OidcClientSettings.ts", "../../src/UserInfoService.ts", "../../src/TokenClient.ts", "../../src/ResponseValidator.ts", "../../src/State.ts", "../../src/SigninState.ts", "../../src/SigninRequest.ts", "../../src/SigninResponse.ts", "../../src/SignoutRequest.ts", "../../src/SignoutResponse.ts", "../../src/DeviceAuthorizationClient.ts", "../../src/OidcClient.ts", "../../src/SessionMonitor.ts", "../../src/User.ts", "../../src/navigators/AbstractChildWindow.ts", "../../src/UserManagerSettings.ts", "../../src/navigators/IFrameWindow.ts", "../../src/navigators/IFrameNavigator.ts", "../../src/navigators/PopupWindow.ts", "../../src/navigators/PopupNavigator.ts", "../../src/navigators/RedirectNavigator.ts", "../../src/UserManagerEvents.ts", "../../src/SilentRenewService.ts", "../../src/RefreshState.ts", "../../src/UserManager.ts", "../../src/Version.ts"],
  "sourcesContent": ["// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nexport { ErrorResponse, ErrorTimeout } from \"./errors\";\nexport type { IFrameWindowParams, PopupWindowParams, RedirectParams } from \"./navigators\";\nexport { Log, Logger } from \"./utils\";\nexport type { ILogger, PopupWindowFeatures } from \"./utils\";\nexport type { OidcAddressClaim, OidcStandardClaims, IdTokenClaims, JwtClaims } from \"./Claims\";\n\nexport { AccessTokenEvents } from \"./AccessTokenEvents\";\nexport type { AccessTokenCallback } from \"./AccessTokenEvents\";\nexport { CheckSessionIFrame } from \"./CheckSessionIFrame\";\nexport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\nexport { MetadataService } from \"./MetadataService\";\nexport * from \"./OidcClient\";\nexport { OidcClientSettingsStore } from \"./OidcClientSettings\";\nexport type { OidcClientSettings, SigningKey } from \"./OidcClientSettings\";\nexport type { OidcMetadata } from \"./OidcMetadata\";\nexport { SessionMonitor } from \"./SessionMonitor\";\nexport type { SessionStatus } from \"./SessionStatus\";\nexport type { SigninRequest, SigninRequestArgs } from \"./SigninRequest\";\nexport { SigninResponse } from \"./SigninResponse\";\nexport { SigninState } from \"./SigninState\";\nexport type { SignoutRequest, SignoutRequestArgs } from \"./SignoutRequest\";\nexport { SignoutResponse } from \"./SignoutResponse\";\nexport { State } from \"./State\";\nexport type { StateStore } from \"./StateStore\";\nexport { User } from \"./User\";\nexport type { UserProfile } from \"./User\";\nexport * from \"./UserManager\";\nexport type {\n    UserManagerEvents,\n    SilentRenewErrorCallback,\n    UserLoadedCallback,\n    UserSessionChangedCallback,\n    UserSignedInCallback,\n    UserSignedOutCallback,\n    UserUnloadedCallback,\n} from \"./UserManagerEvents\";\nexport { UserManagerSettingsStore } from \"./UserManagerSettings\";\nexport type { UserManagerSettings } from \"./UserManagerSettings\";\nexport { Version } from \"./Version\";\nexport { WebStorageStateStore } from \"./WebStorageStateStore\";\nexport type { DeviceAuthorizationResponse } from \"./DeviceAuthorizationClient\";\n", "import CryptoJS from \"crypto-js/core.js\";\nimport sha256 from \"crypto-js/sha256.js\";\nimport Base64 from \"crypto-js/enc-base64.js\";\nimport Utf8 from \"crypto-js/enc-utf8.js\";\n\nimport { Logger } from \"./Logger\";\n\nconst UUID_V4_TEMPLATE = \"10000000-1000-4000-8000-100000000000\";\n\n/**\n * @internal\n */\nexport class CryptoUtils {\n    private static _randomWord(): number {\n        return CryptoJS.lib.WordArray.random(1).words[0];\n    }\n\n    /**\n     * Generates RFC4122 version 4 guid\n     */\n    public static generateUUIDv4(): string {\n        const uuid = UUID_V4_TEMPLATE.replace(/[018]/g, c =>\n            (+c ^ CryptoUtils._randomWord() & 15 >> +c / 4).toString(16),\n        );\n        return uuid.replace(/-/g, \"\");\n    }\n\n    /**\n     * PKCE: Generate a code verifier\n     */\n    public static generateCodeVerifier(): string {\n        return CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4() + CryptoUtils.generateUUIDv4();\n    }\n\n    /**\n     * PKCE: Generate a code challenge\n     */\n    public static generateCodeChallenge(code_verifier: string): string {\n        try {\n            const hashed = sha256(code_verifier);\n            return Base64.stringify(hashed).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n        }\n        catch (err) {\n            Logger.error(\"CryptoUtils.generateCodeChallenge\", err);\n            throw err;\n        }\n    }\n\n    /**\n     * Generates a base64-encoded string for a basic auth header\n     */\n    public static generateBasicAuth(client_id: string, client_secret: string): string {\n        const basicAuth = Utf8.parse([client_id, client_secret].join(\":\"));\n        return Base64.stringify(basicAuth);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * Native interface\n *\n * @public\n */\nexport interface ILogger {\n    debug(...args: unknown[]): void;\n    info(...args: unknown[]): void;\n    warn(...args: unknown[]): void;\n    error(...args: unknown[]): void;\n}\n\nconst nopLogger: ILogger = {\n    debug: () => undefined,\n    info: () => undefined,\n    warn: () => undefined,\n    error: () => undefined,\n};\n\nlet level: number;\nlet logger: ILogger;\n\n/**\n * Log levels\n *\n * @public\n */\nexport enum Log {\n    NONE,\n    ERROR,\n    WARN,\n    INFO,\n    DEBUG\n}\n\n/**\n * Log manager\n *\n * @public\n */\nexport namespace Log { // eslint-disable-line @typescript-eslint/no-namespace\n    export function reset(): void {\n        level = Log.INFO;\n        logger = nopLogger;\n    }\n\n    export function setLevel(value: Log): void {\n        if (!(Log.NONE <= value && value <= Log.DEBUG)) {\n            throw new Error(\"Invalid log level\");\n        }\n        level = value;\n    }\n\n    export function setLogger(value: ILogger): void {\n        logger = value;\n    }\n}\n\n/**\n * Internal logger instance\n *\n * @public\n */\nexport class Logger {\n    private _method?: string;\n    public constructor(private _name: string) {}\n\n    public debug(...args: unknown[]): void {\n        if (level >= Log.DEBUG) {\n            logger.debug(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public info(...args: unknown[]): void {\n        if (level >= Log.INFO) {\n            logger.info(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public warn(...args: unknown[]): void {\n        if (level >= Log.WARN) {\n            logger.warn(Logger._format(this._name, this._method), ...args);\n        }\n    }\n    public error(...args: unknown[]): void {\n        if (level >= Log.ERROR) {\n            logger.error(Logger._format(this._name, this._method), ...args);\n        }\n    }\n\n    public throw(err: Error): never {\n        this.error(err);\n        throw err;\n    }\n\n    public create(method: string): Logger {\n        const methodLogger: Logger = Object.create(this);\n        methodLogger._method = method;\n        methodLogger.debug(\"begin\");\n        return methodLogger;\n    }\n\n    public static createStatic(name: string, staticMethod: string): Logger {\n        const staticLogger = new Logger(`${name}.${staticMethod}`);\n        staticLogger.debug(\"begin\");\n        return staticLogger;\n    }\n\n    private static _format(name: string, method?: string) {\n        const prefix = `[${name}]`;\n        return method ? `${prefix} ${method}:` : prefix;\n    }\n\n    // helpers for static class methods\n    public static debug(name: string, ...args: unknown[]): void {\n        if (level >= Log.DEBUG) {\n            logger.debug(Logger._format(name), ...args);\n        }\n    }\n    public static info(name: string, ...args: unknown[]): void {\n        if (level >= Log.INFO) {\n            logger.info(Logger._format(name), ...args);\n        }\n    }\n    public static warn(name: string, ...args: unknown[]): void {\n        if (level >= Log.WARN) {\n            logger.warn(Logger._format(name), ...args);\n        }\n    }\n    public static error(name: string, ...args: unknown[]): void {\n        if (level >= Log.ERROR) {\n            logger.error(Logger._format(name), ...args);\n        }\n    }\n}\n\nLog.reset();\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./Logger\";\n\n/**\n * @internal\n */\nexport type Callback<EventType extends unknown[]> = (...ev: EventType) => (Promise<void> | void);\n\n/**\n * @internal\n */\nexport class Event<EventType extends unknown[]> {\n    protected readonly _logger = new Logger(`Event('${this._name}')`);\n\n    private _callbacks: Array<Callback<EventType>> = [];\n\n    public constructor(protected readonly _name: string) {}\n\n    public addHandler(cb: Callback<EventType>): () => void {\n        this._callbacks.push(cb);\n        return () => this.removeHandler(cb);\n    }\n\n    public removeHandler(cb: Callback<EventType>): void {\n        const idx = this._callbacks.lastIndexOf(cb);\n        if (idx >= 0) {\n            this._callbacks.splice(idx, 1);\n        }\n    }\n\n    public raise(...ev: EventType): void {\n        this._logger.debug(\"raise:\", ...ev);\n        for (const cb of this._callbacks) {\n            void cb(...ev);\n        }\n    }\n}\n", "import jwt_decode from \"jwt-decode\";\n\nimport { Logger } from \"./Logger\";\nimport type { JwtClaims } from \"../Claims\";\n\n/**\n * @internal\n */\nexport class JwtUtils {\n    // IMPORTANT: doesn't validate the token\n    public static decode(token: string): JwtClaims {\n        try {\n            return jwt_decode<JwtClaims>(token);\n        }\n        catch (err) {\n            Logger.error(\"JwtUtils.decode\", err);\n            throw err;\n        }\n    }\n}\n", "/**\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n *\n * @public\n */\nexport interface PopupWindowFeatures {\n    left?: number;\n    top?: number;\n    width?: number;\n    height?: number;\n    menubar?: boolean | string;\n    toolbar?: boolean | string;\n    location?: boolean | string;\n    status?: boolean | string;\n    resizable?: boolean | string;\n    scrollbars?: boolean | string;\n\n    [k: string]: boolean | string | number | undefined;\n}\n\nexport class PopupUtils {\n    /**\n     * Populates a map of window features with a placement centered in front of\n     * the current window. If no explicit width is given, a default value is\n     * binned into [800, 720, 600, 480, 360] based on the current window's width.\n     */\n    static center({ ...features }: PopupWindowFeatures): PopupWindowFeatures {\n        if (features.width == null)\n            features.width = [800, 720, 600, 480].find(width => width <= window.outerWidth / 1.618) ?? 360;\n        features.left ??= Math.max(0, Math.round(window.screenX + (window.outerWidth - features.width) / 2));\n        if (features.height != null)\n            features.top ??= Math.max(0, Math.round(window.screenY + (window.outerHeight - features.height) / 2));\n        return features;\n    }\n\n    static serialize(features: PopupWindowFeatures): string {\n        return Object.entries(features)\n            .filter(([, value]) => value != null)\n            .map(([key, value]) => `${key}=${typeof value !== \"boolean\" ? value as string : value ? \"yes\" : \"no\"}`)\n            .join(\",\");\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Event } from \"./Event\";\nimport { Logger } from \"./Logger\";\n\n/**\n * @internal\n */\nexport class Timer extends Event<[void]> {\n    protected readonly _logger = new Logger(`Timer('${this._name}')`);\n    private _timerHandle: ReturnType<typeof setInterval> | null = null;\n    private _expiration = 0;\n\n    // get the time\n    public static getEpochTime(): number {\n        return Math.floor(Date.now() / 1000);\n    }\n\n    public init(durationInSeconds: number): void {\n        const logger = this._logger.create(\"init\");\n        durationInSeconds = Math.max(Math.floor(durationInSeconds), 1);\n        const expiration = Timer.getEpochTime() + durationInSeconds;\n        if (this.expiration === expiration && this._timerHandle) {\n            // no need to reinitialize to same expiration, so bail out\n            logger.debug(\"skipping since already initialized for expiration at\", this.expiration);\n            return;\n        }\n\n        this.cancel();\n\n        logger.debug(\"using duration\", durationInSeconds);\n        this._expiration = expiration;\n\n        // we're using a fairly short timer and then checking the expiration in the\n        // callback to handle scenarios where the browser device sleeps, and then\n        // the timers end up getting delayed.\n        const timerDurationInSeconds = Math.min(durationInSeconds, 5);\n        this._timerHandle = setInterval(this._callback, timerDurationInSeconds * 1000);\n    }\n\n    public get expiration(): number {\n        return this._expiration;\n    }\n\n    public cancel(): void {\n        this._logger.create(\"cancel\");\n        if (this._timerHandle) {\n            clearInterval(this._timerHandle);\n            this._timerHandle = null;\n        }\n    }\n\n    protected _callback = (): void => {\n        const diff = this._expiration - Timer.getEpochTime();\n        this._logger.debug(\"timer completes in\", diff);\n\n        if (this._expiration <= Timer.getEpochTime()) {\n            this.cancel();\n            super.raise();\n        }\n    };\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * @internal\n */\nexport class UrlUtils {\n    public static readParams(url: string, responseMode: \"query\" | \"fragment\" = \"query\"): URLSearchParams {\n        if (!url) throw new TypeError(\"Invalid URL\");\n        const parsedUrl = new URL(url, window.location.origin);\n        const params = parsedUrl[responseMode === \"fragment\" ? \"hash\" : \"search\"];\n        return new URLSearchParams(params.slice(1));\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\n\n/**\n * Error class thrown in case of an authentication error.\n *\n * See https://openid.net/specs/openid-connect-core-1_0.html#AuthError\n *\n * @public\n */\nexport class ErrorResponse extends Error {\n    /** Marker to detect class: \"ErrorResponse\" */\n    public readonly name: string = \"ErrorResponse\";\n\n    /** An error code string that can be used to classify the types of errors that occur and to respond to errors. */\n    public readonly error: string | null;\n    /** additional information that can help a developer identify the cause of the error.*/\n    public readonly error_description: string | null;\n    /**\n     * URI identifying a human-readable web page with information about the error, used to provide the client\n       developer with additional information about the error.\n    */\n    public readonly error_uri: string | null;\n\n    /** custom state data set during the initial signin request */\n    public state?: unknown;\n\n    public readonly session_state: string | null;\n\n    public constructor(\n        args: {\n            error?: string | null; error_description?: string | null; error_uri?: string | null;\n            userState?: unknown; session_state?: string | null;\n        },\n        /** The x-www-form-urlencoded request body sent to the authority server */\n        public readonly form?: URLSearchParams,\n    ) {\n        super(args.error_description || args.error || \"\");\n\n        if (!args.error) {\n            Logger.error(\"ErrorResponse\", \"No error passed\");\n            throw new Error(\"No error passed\");\n        }\n\n        this.error = args.error;\n        this.error_description = args.error_description ?? null;\n        this.error_uri = args.error_uri ?? null;\n\n        this.state = args.userState;\n        this.session_state = args.session_state ?? null;\n    }\n}\n", "// Copyright (C) 2021 AuthTS Contributors\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * Error class thrown in case of network timeouts (e.g IFrame time out).\n *\n * @public\n */\nexport class ErrorTimeout extends Error {\n    /** Marker to detect class: \"ErrorTimeout\" */\n    public readonly name: string = \"ErrorTimeout\";\n\n    public constructor(message?: string) {\n        super(message);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport type AccessTokenCallback = (...ev: unknown[]) => (Promise<void> | void);\n\n/**\n * @public\n */\nexport class AccessTokenEvents {\n    protected readonly _logger = new Logger(\"AccessTokenEvents\");\n\n    private readonly _expiringTimer = new Timer(\"Access token expiring\");\n    private readonly _expiredTimer = new Timer(\"Access token expired\");\n    private readonly _expiringNotificationTimeInSeconds: number;\n\n    public constructor(args: { expiringNotificationTimeInSeconds: number }) {\n        this._expiringNotificationTimeInSeconds = args.expiringNotificationTimeInSeconds;\n    }\n\n    public load(container: User): void {\n        const logger = this._logger.create(\"load\");\n        // only register events if there's an access token and it has an expiration\n        if (container.access_token && container.expires_in !== undefined) {\n            const duration = container.expires_in;\n            logger.debug(\"access token present, remaining duration:\", duration);\n\n            if (duration > 0) {\n                // only register expiring if we still have time\n                let expiring = duration - this._expiringNotificationTimeInSeconds;\n                if (expiring <= 0) {\n                    expiring = 1;\n                }\n\n                logger.debug(\"registering expiring timer, raising in\", expiring, \"seconds\");\n                this._expiringTimer.init(expiring);\n            }\n            else {\n                logger.debug(\"canceling existing expiring timer because we're past expiration.\");\n                this._expiringTimer.cancel();\n            }\n\n            // if it's negative, it will still fire\n            const expired = duration + 1;\n            logger.debug(\"registering expired timer, raising in\", expired, \"seconds\");\n            this._expiredTimer.init(expired);\n        }\n        else {\n            this._expiringTimer.cancel();\n            this._expiredTimer.cancel();\n        }\n    }\n\n    public unload(): void {\n        this._logger.debug(\"unload: canceling existing access token timers\");\n        this._expiringTimer.cancel();\n        this._expiredTimer.cancel();\n    }\n\n    /**\n     * Add callback: Raised prior to the access token expiring.\n     */\n    public addAccessTokenExpiring(cb: AccessTokenCallback): () => void {\n        return this._expiringTimer.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised prior to the access token expiring.\n     */\n    public removeAccessTokenExpiring(cb: AccessTokenCallback): void {\n        this._expiringTimer.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised after the access token has expired.\n     */\n    public addAccessTokenExpired(cb: AccessTokenCallback): () => void {\n        return this._expiredTimer.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised after the access token has expired.\n     */\n    public removeAccessTokenExpired(cb: AccessTokenCallback): void {\n        this._expiredTimer.removeHandler(cb);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\n\n/**\n * @internal\n */\nexport class CheckSessionIFrame {\n    private readonly _logger = new Logger(\"CheckSessionIFrame\");\n    private _frame_origin: string;\n    private _frame: HTMLIFrameElement;\n    private _timer: ReturnType<typeof setInterval> | null = null;\n    private _session_state: string | null = null;\n\n    public constructor(\n        private _callback: () => Promise<void>,\n        private _client_id: string,\n        url: string,\n        private _intervalInSeconds: number,\n        private _stopOnError: boolean,\n    ) {\n        const parsedUrl = new URL(url);\n        this._frame_origin = parsedUrl.origin;\n\n        this._frame = window.document.createElement(\"iframe\");\n\n        // shotgun approach\n        this._frame.style.visibility = \"hidden\";\n        this._frame.style.position = \"fixed\";\n        this._frame.style.left = \"-1000px\";\n        this._frame.style.top = \"0\";\n        this._frame.width = \"0\";\n        this._frame.height = \"0\";\n        this._frame.src = parsedUrl.href;\n    }\n\n    public load(): Promise<void> {\n        return new Promise<void>((resolve) => {\n            this._frame.onload = () => {\n                resolve();\n            };\n\n            window.document.body.appendChild(this._frame);\n            window.addEventListener(\"message\", this._message, false);\n        });\n    }\n\n    private _message = (e: MessageEvent<string>): void => {\n        if (e.origin === this._frame_origin &&\n            e.source === this._frame.contentWindow\n        ) {\n            if (e.data === \"error\") {\n                this._logger.error(\"error message from check session op iframe\");\n                if (this._stopOnError) {\n                    this.stop();\n                }\n            }\n            else if (e.data === \"changed\") {\n                this._logger.debug(\"changed message from check session op iframe\");\n                this.stop();\n                void this._callback();\n            }\n            else {\n                this._logger.debug(e.data + \" message from check session op iframe\");\n            }\n        }\n    };\n\n    public start(session_state: string): void {\n        if (this._session_state === session_state) {\n            return;\n        }\n\n        this._logger.create(\"start\");\n\n        this.stop();\n\n        this._session_state = session_state;\n\n        const send = () => {\n            if (!this._frame.contentWindow || !this._session_state) {\n                return;\n            }\n\n            this._frame.contentWindow.postMessage(this._client_id + \" \" + this._session_state, this._frame_origin);\n        };\n\n        // trigger now\n        send();\n\n        // and setup timer\n        this._timer = setInterval(send, this._intervalInSeconds * 1000);\n    }\n\n    public stop(): void {\n        this._logger.create(\"stop\");\n        this._session_state = null;\n\n        if (this._timer) {\n\n            clearInterval(this._timer);\n            this._timer = null;\n        }\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\n\n/**\n * @public\n */\nexport class InMemoryWebStorage implements Storage {\n    private readonly _logger = new Logger(\"InMemoryWebStorage\");\n    private _data: Record<string, string> = {};\n\n    public clear(): void {\n        this._logger.create(\"clear\");\n        this._data = {};\n    }\n\n    public getItem(key: string): string {\n        this._logger.create(`getItem('${key}')`);\n        return this._data[key];\n    }\n\n    public setItem(key: string, value: string): void {\n        this._logger.create(`setItem('${key}')`);\n        this._data[key] = value;\n    }\n\n    public removeItem(key: string): void {\n        this._logger.create(`removeItem('${key}')`);\n        delete this._data[key];\n    }\n\n    public get length(): number {\n        return Object.getOwnPropertyNames(this._data).length;\n    }\n\n    public key(index: number): string {\n        return Object.getOwnPropertyNames(this._data)[index];\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { ErrorResponse, ErrorTimeout } from \"./errors\";\nimport { Logger } from \"./utils\";\n\n/**\n * @internal\n */\nexport type JwtHandler = (text: string) => Promise<Record<string, unknown>>;\n\n/**\n * @internal\n */\nexport interface GetJsonOpts {\n    token?: string;\n}\n\n/**\n * @internal\n */\nexport interface PostFormOpts {\n    body: URLSearchParams;\n    basicAuth?: string;\n    timeoutInSeconds?: number;\n}\n\n/**\n * @internal\n */\nexport class JsonService {\n    private readonly _logger = new Logger(\"JsonService\");\n\n    private _contentTypes: string[] = [];\n\n    public constructor(\n        additionalContentTypes: string[] = [],\n        private _jwtHandler: JwtHandler | null = null,\n    ) {\n        this._contentTypes.push(...additionalContentTypes, \"application/json\");\n        if (_jwtHandler) {\n            this._contentTypes.push(\"application/jwt\");\n        }\n    }\n\n    protected async fetchWithTimeout(input: RequestInfo, init: RequestInit & { timeoutInSeconds?: number } = {}) {\n        const { timeoutInSeconds, ...initFetch } = init;\n        if (!timeoutInSeconds) {\n            return await fetch(input, initFetch);\n        }\n\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), timeoutInSeconds * 1000);\n\n        try {\n            const response = await fetch(input, {\n                ...init,\n                signal: controller.signal,\n            });\n            return response;\n        }\n        catch (err) {\n            if (err instanceof DOMException && err.name === \"AbortError\") {\n                throw new ErrorTimeout(\"Network timed out\");\n            }\n            throw err;\n        }\n        finally {\n            clearTimeout(timeoutId);\n        }\n    }\n\n    public async getJson(url: string, {\n        token,\n    }: GetJsonOpts = {}): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"getJson\");\n        const headers: HeadersInit = {\n            \"Accept\": this._contentTypes.join(\", \"),\n        };\n        if (token) {\n            logger.debug(\"token passed, setting Authorization header\");\n            headers[\"Authorization\"] = \"Bearer \" + token;\n        }\n\n        let response: Response;\n        try {\n            logger.debug(\"url:\", url);\n            response = await this.fetchWithTimeout(url, { method: \"GET\", headers });\n        }\n        catch (err) {\n            logger.error(\"Network Error\");\n            throw err;\n        }\n\n        logger.debug(\"HTTP response received, status\", response.status);\n        const contentType = response.headers.get(\"Content-Type\");\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n            logger.throw(new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`));\n        }\n        if (response.ok && this._jwtHandler && contentType?.startsWith(\"application/jwt\")) {\n            return await this._jwtHandler(await response.text());\n        }\n        let json: Record<string, unknown>;\n        try {\n            json = await response.json();\n        }\n        catch (err) {\n            logger.error(\"Error parsing JSON response\", err);\n            if (response.ok) throw err;\n            throw new Error(`${response.statusText} (${response.status})`);\n        }\n        if (!response.ok) {\n            logger.error(\"Error from server:\", json);\n            if (json.error) {\n                throw new ErrorResponse(json);\n            }\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n        }\n        return json;\n    }\n\n    public async postForm(url: string, {\n        body,\n        basicAuth,\n        timeoutInSeconds,\n    }: PostFormOpts): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"postForm\");\n        const headers: HeadersInit = {\n            \"Accept\": this._contentTypes.join(\", \"),\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n        };\n        if (basicAuth !== undefined) {\n            headers[\"Authorization\"] = \"Basic \" + basicAuth;\n        }\n\n        let response: Response;\n        try {\n            logger.debug(\"url:\", url);\n            response = await this.fetchWithTimeout(url, { method: \"POST\", headers, body, timeoutInSeconds });\n        }\n        catch (err) {\n            logger.error(\"Network error\");\n            throw err;\n        }\n\n        logger.debug(\"HTTP response received, status\", response.status);\n        const contentType = response.headers.get(\"Content-Type\");\n        if (contentType && !this._contentTypes.find(item => contentType.startsWith(item))) {\n            throw new Error(`Invalid response Content-Type: ${(contentType ?? \"undefined\")}, from URL: ${url}`);\n        }\n\n        const responseText = await response.text();\n\n        let json: Record<string, unknown> = {};\n        if (responseText) {\n            try {\n                json = JSON.parse(responseText);\n            }\n            catch (err) {\n                logger.error(\"Error parsing JSON response\", err);\n                if (response.ok) throw err;\n                throw new Error(`${response.statusText} (${response.status})`);\n            }\n        }\n\n        if (!response.ok) {\n            logger.error(\"Error from server:\", json);\n            if (json.error) {\n                throw new ErrorResponse(json, body);\n            }\n            throw new Error(`${response.statusText} (${response.status}): ${JSON.stringify(json)}`);\n        }\n\n        return json;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { OidcClientSettingsStore, SigningKey } from \"./OidcClientSettings\";\nimport type { OidcMetadata } from \"./OidcMetadata\";\n\n/**\n * @public\n */\nexport class MetadataService {\n    private readonly _logger = new Logger(\"MetadataService\");\n    private readonly _jsonService = new JsonService([\"application/jwk-set+json\"]);\n\n    // cache\n    private _metadataUrl: string;\n    private _signingKeys: SigningKey[] | null = null;\n    private _metadata: Partial<OidcMetadata> | null = null;\n\n    public constructor(private readonly _settings: OidcClientSettingsStore) {\n        this._metadataUrl = this._settings.metadataUrl;\n\n        if (this._settings.signingKeys) {\n            this._logger.debug(\"using signingKeys from settings\");\n            this._signingKeys = this._settings.signingKeys;\n        }\n\n        if (this._settings.metadata) {\n            this._logger.debug(\"using metadata from settings\");\n            this._metadata = this._settings.metadata;\n        }\n    }\n\n    public resetSigningKeys(): void {\n        this._signingKeys = null;\n    }\n\n    public async getMetadata(): Promise<Partial<OidcMetadata>> {\n        const logger = this._logger.create(\"getMetadata\");\n        if (this._metadata) {\n            logger.debug(\"using cached values\");\n            return this._metadata;\n        }\n\n        if (!this._metadataUrl) {\n            logger.throw(new Error(\"No authority or metadataUrl configured on settings\"));\n            throw null;\n        }\n\n        logger.debug(\"getting metadata from\", this._metadataUrl);\n        const metadata = await this._jsonService.getJson(this._metadataUrl);\n\n        logger.debug(\"merging remote JSON with seed metadata\");\n        this._metadata = Object.assign({}, this._settings.metadataSeed, metadata);\n        return this._metadata;\n    }\n\n    public getIssuer(): Promise<string> {\n        return this._getMetadataProperty(\"issuer\") as Promise<string>;\n    }\n\n    public getAuthorizationEndpoint(): Promise<string> {\n        return this._getMetadataProperty(\"authorization_endpoint\") as Promise<string>;\n    }\n\n    public getUserInfoEndpoint(): Promise<string> {\n        return this._getMetadataProperty(\"userinfo_endpoint\") as Promise<string>;\n    }\n\n    public getTokenEndpoint(optional: false): Promise<string>;\n    public getTokenEndpoint(optional?: true): Promise<string | undefined>;\n    public getTokenEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"token_endpoint\", optional) as Promise<string | undefined>;\n    }\n\n    public getCheckSessionIframe(): Promise<string | undefined> {\n        return this._getMetadataProperty(\"check_session_iframe\", true) as Promise<string | undefined>;\n    }\n\n    public getEndSessionEndpoint(): Promise<string | undefined> {\n        return this._getMetadataProperty(\"end_session_endpoint\", true) as Promise<string | undefined>;\n    }\n\n    public getRevocationEndpoint(optional: false): Promise<string>;\n    public getRevocationEndpoint(optional?: true): Promise<string | undefined>;\n    public getRevocationEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"revocation_endpoint\", optional) as Promise<string | undefined>;\n    }\n\n    public getKeysEndpoint(optional: false): Promise<string>;\n    public getKeysEndpoint(optional?: true): Promise<string | undefined>;\n    public getKeysEndpoint(optional = true): Promise<string | undefined> {\n        return this._getMetadataProperty(\"jwks_uri\", optional) as Promise<string | undefined>;\n    }\n\n    protected async _getMetadataProperty(name: keyof OidcMetadata, optional=false): Promise<string | boolean | string[] | undefined> {\n        const logger = this._logger.create(`_getMetadataProperty('${name}')`);\n\n        const metadata = await this.getMetadata();\n        logger.debug(\"resolved\");\n\n        if (metadata[name] === undefined) {\n            if (optional === true) {\n                logger.warn(\"Metadata does not contain optional property\");\n                return undefined;\n            }\n\n            logger.throw(new Error(\"Metadata does not contain property \" + name));\n        }\n\n        return metadata[name];\n    }\n\n    public async getSigningKeys(): Promise<SigningKey[] | null> {\n        const logger = this._logger.create(\"getSigningKeys\");\n        if (this._signingKeys) {\n            logger.debug(\"returning signingKeys from cache\");\n            return this._signingKeys;\n        }\n\n        const jwks_uri = await this.getKeysEndpoint(false);\n        logger.debug(\"got jwks_uri\", jwks_uri);\n\n        const keySet = await this._jsonService.getJson(jwks_uri);\n        logger.debug(\"got key set\", keySet);\n\n        if (!Array.isArray(keySet.keys)) {\n            logger.throw(new Error(\"Missing keys on keyset\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        this._signingKeys = keySet.keys;\n        return this._signingKeys;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport type { StateStore } from \"./StateStore\";\n\n/**\n * @public\n */\nexport class WebStorageStateStore implements StateStore {\n    private readonly _logger = new Logger(\"WebStorageStateStore\");\n\n    private readonly _store: Storage;\n    private readonly _prefix: string;\n\n    public constructor({ prefix = \"oidc.\", store = localStorage } = {}) {\n        this._store = store;\n        this._prefix = prefix;\n    }\n\n    public set(key: string, value: string): Promise<void> {\n        this._logger.create(`set('${key}')`);\n\n        key = this._prefix + key;\n        this._store.setItem(key, value);\n        return Promise.resolve();\n    }\n\n    public get(key: string): Promise<string | null> {\n        this._logger.create(`get('${key}')`);\n\n        key = this._prefix + key;\n        const item = this._store.getItem(key);\n        return Promise.resolve(item);\n    }\n\n    public remove(key: string): Promise<string | null> {\n        this._logger.create(`remove('${key}')`);\n\n        key = this._prefix + key;\n        const item = this._store.getItem(key);\n        this._store.removeItem(key);\n        return Promise.resolve(item);\n    }\n\n    public getAllKeys(): Promise<string[]> {\n        this._logger.create(\"getAllKeys\");\n\n        const keys = [];\n        for (let index = 0; index < this._store.length; index++) {\n            const key = this._store.key(index);\n            if (key && key.indexOf(this._prefix) === 0) {\n                keys.push(key.substr(this._prefix.length));\n            }\n        }\n        return Promise.resolve(keys);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\nimport type { OidcMetadata } from \"./OidcMetadata\";\nimport type { StateStore } from \"./StateStore\";\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\n\nconst DefaultResponseType = \"code\";\nconst DefaultScope = \"openid\";\nconst DefaultClientAuthentication = \"client_secret_post\";\nconst DefaultResponseMode = \"query\";\nconst DefaultStaleStateAgeInSeconds = 60 * 15;\nconst DefaultClockSkewInSeconds = 60 * 5;\n\n/**\n * @public\n */\nexport type SigningKey = Record<string, string | string[]>;\n\n/**\n * The settings used to configure the {@link OidcClient}.\n *\n * @public\n */\nexport interface OidcClientSettings {\n    /** The URL of the OIDC/OAuth2 provider */\n    authority: string;\n    metadataUrl?: string;\n    /** Provide metadata when authority server does not allow CORS on the metadata endpoint */\n    metadata?: Partial<OidcMetadata>;\n    /** Can be used to seed or add additional values to the results of the discovery request */\n    metadataSeed?: Partial<OidcMetadata>;\n    /** Provide signingKeys when authority server does not allow CORS on the jwks uri */\n    signingKeys?: SigningKey[];\n\n    /** Your client application's identifier as registered with the OIDC/OAuth2 */\n    client_id: string;\n    client_secret?: string;\n    /** The type of response desired from the OIDC/OAuth2 provider (default: \"code\") */\n    response_type?: string;\n    /** The scope being requested from the OIDC/OAuth2 provider (default: \"openid\") */\n    scope?: string;\n    /** The redirect URI of your client application to receive a response from the OIDC/OAuth2 provider */\n    redirect_uri: string;\n    /** The OIDC/OAuth2 post-logout redirect URI */\n    post_logout_redirect_uri?: string;\n\n    /**\n     * Client authentication method that is used to authenticate when using the token endpoint (default: \"client_secret_post\")\n     * - \"client_secret_basic\": using the HTTP Basic authentication scheme\n     * - \"client_secret_post\": including the client credentials in the request body\n     *\n     * See https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\n     */\n    client_authentication?: \"client_secret_basic\" | \"client_secret_post\";\n\n    /** optional protocol param */\n    prompt?: string;\n    /** optional protocol param */\n    display?: string;\n    /** optional protocol param */\n    max_age?: number;\n    /** optional protocol param */\n    ui_locales?: string;\n    /** optional protocol param */\n    acr_values?: string;\n    /** optional protocol param */\n    resource?: string;\n\n    /** optional protocol param (default: \"query\") */\n    response_mode?: \"query\" | \"fragment\";\n\n    /** Should OIDC protocol claims be removed from profile (default: true) */\n    filterProtocolClaims?: boolean;\n    /** Flag to control if additional identity data is loaded from the user info endpoint in order to populate the user's profile (default: false) */\n    loadUserInfo?: boolean;\n    /** Number (in seconds) indicating the age of state entries in storage for authorize requests that are considered abandoned and thus can be cleaned up (default: 300) */\n    staleStateAgeInSeconds?: number;\n\n    /** @deprecated Unused */\n    clockSkewInSeconds?: number;\n    /** @deprecated Unused */\n    userInfoJwtIssuer?: \"ANY\" | \"OP\" | string;\n\n    /**\n     * Indicates if objects returned from the user info endpoint as claims (e.g. `address`) are merged into the claims from the id token as a single object.\n     * Otherwise, they are added to an array as distinct objects for the claim type. (default: false)\n     */\n    mergeClaims?: boolean;\n\n    /**\n     * Storage object used to persist interaction state (default: window.localStorage, InMemoryWebStorage iff no window).\n     * E.g. `stateStore: new WebStorageStateStore({ store: window.localStorage })`\n     */\n    stateStore?: StateStore;\n\n    /**\n     * An object containing additional query string parameters to be including in the authorization request.\n     * E.g, when using Azure AD to obtain an access token an additional resource parameter is required. extraQueryParams: `{resource:\"some_identifier\"}`\n     */\n    extraQueryParams?: Record<string, string | number | boolean>;\n\n    extraTokenParams?: Record<string, unknown>;\n}\n\n/**\n * The settings with defaults applied of the {@link OidcClient}.\n * @see {@link OidcClientSettings}\n *\n * @public\n */\nexport class OidcClientSettingsStore {\n    // metadata\n    public readonly authority: string;\n    public readonly metadataUrl: string;\n    public readonly metadata: Partial<OidcMetadata> | undefined;\n    public readonly metadataSeed: Partial<OidcMetadata> | undefined;\n    public readonly signingKeys: SigningKey[] | undefined;\n\n    // client config\n    public readonly client_id: string;\n    public readonly client_secret: string | undefined;\n    public readonly response_type: string;\n    public readonly scope: string;\n    public readonly redirect_uri: string;\n    public readonly post_logout_redirect_uri: string | undefined;\n    public readonly client_authentication: \"client_secret_basic\" | \"client_secret_post\";\n\n    // optional protocol params\n    public readonly prompt: string | undefined;\n    public readonly display: string | undefined;\n    public readonly max_age: number | undefined;\n    public readonly ui_locales: string | undefined;\n    public readonly acr_values: string | undefined;\n    public readonly resource: string | undefined;\n    public readonly response_mode: \"query\" | \"fragment\";\n\n    // behavior flags\n    public readonly filterProtocolClaims: boolean;\n    public readonly loadUserInfo: boolean;\n    public readonly staleStateAgeInSeconds: number;\n    public readonly clockSkewInSeconds: number;\n    public readonly userInfoJwtIssuer: \"ANY\" | \"OP\" | string;\n    public readonly mergeClaims: boolean;\n\n    public readonly stateStore: StateStore;\n\n    // extra\n    public readonly extraQueryParams: Record<string, string | number | boolean>;\n    public readonly extraTokenParams: Record<string, unknown>;\n\n    public constructor({\n        // metadata related\n        authority, metadataUrl, metadata, signingKeys, metadataSeed,\n        // client related\n        client_id, client_secret, response_type = DefaultResponseType, scope = DefaultScope,\n        redirect_uri, post_logout_redirect_uri,\n        client_authentication = DefaultClientAuthentication,\n        // optional protocol\n        prompt, display, max_age, ui_locales, acr_values, resource, response_mode = DefaultResponseMode,\n        // behavior flags\n        filterProtocolClaims = true,\n        loadUserInfo = false,\n        staleStateAgeInSeconds = DefaultStaleStateAgeInSeconds,\n        clockSkewInSeconds = DefaultClockSkewInSeconds,\n        userInfoJwtIssuer = \"OP\",\n        mergeClaims = false,\n        // other behavior\n        stateStore,\n        // extra query params\n        extraQueryParams = {},\n        extraTokenParams = {},\n    }: OidcClientSettings) {\n\n        this.authority = authority;\n\n        if (metadataUrl) {\n            this.metadataUrl = metadataUrl;\n        } else {\n            this.metadataUrl = authority;\n            if (authority) {\n                if (!this.metadataUrl.endsWith(\"/\")) {\n                    this.metadataUrl += \"/\";\n                }\n                this.metadataUrl += \".well-known/openid-configuration\";\n            }\n        }\n\n        this.metadata = metadata;\n        this.metadataSeed = metadataSeed;\n        this.signingKeys = signingKeys;\n\n        this.client_id = client_id;\n        this.client_secret = client_secret;\n        this.response_type = response_type;\n        this.scope = scope;\n        this.redirect_uri = redirect_uri;\n        this.post_logout_redirect_uri = post_logout_redirect_uri;\n        this.client_authentication = client_authentication;\n\n        this.prompt = prompt;\n        this.display = display;\n        this.max_age = max_age;\n        this.ui_locales = ui_locales;\n        this.acr_values = acr_values;\n        this.resource = resource;\n        this.response_mode = response_mode;\n\n        this.filterProtocolClaims = !!filterProtocolClaims;\n        this.loadUserInfo = !!loadUserInfo;\n        this.staleStateAgeInSeconds = staleStateAgeInSeconds;\n        this.clockSkewInSeconds = clockSkewInSeconds;\n        this.userInfoJwtIssuer = userInfoJwtIssuer;\n        this.mergeClaims = !!mergeClaims;\n\n        if (stateStore) {\n            this.stateStore = stateStore;\n        }\n        else {\n            const store = typeof window !== \"undefined\" ? window.localStorage : new InMemoryWebStorage();\n            this.stateStore = new WebStorageStateStore({ store });\n        }\n\n        this.extraQueryParams = extraQueryParams;\n        this.extraTokenParams = extraTokenParams;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, JwtUtils } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { MetadataService } from \"./MetadataService\";\nimport type { JwtClaims } from \"./Claims\";\n\n/**\n * @internal\n */\nexport class UserInfoService {\n    protected readonly _logger = new Logger(\"UserInfoService\");\n    private readonly _jsonService: JsonService;\n\n    public constructor(private readonly _metadataService: MetadataService) {\n        this._jsonService = new JsonService(undefined, this._getClaimsFromJwt);\n    }\n\n    public async getClaims(token: string): Promise<JwtClaims> {\n        const logger = this._logger.create(\"getClaims\");\n        if (!token) {\n            this._logger.throw(new Error(\"No token passed\"));\n        }\n\n        const url = await this._metadataService.getUserInfoEndpoint();\n        logger.debug(\"got userinfo url\", url);\n\n        const claims = await this._jsonService.getJson(url, { token });\n        logger.debug(\"got claims\", claims);\n\n        return claims;\n    }\n\n    protected _getClaimsFromJwt = async (responseText: string): Promise<JwtClaims> => {\n        const logger = this._logger.create(\"_getClaimsFromJwt\");\n        try {\n            const payload = JwtUtils.decode(responseText);\n            logger.debug(\"JWT decoding successful\");\n\n            return payload;\n        }\n        catch (err) {\n            logger.error(\"Error parsing JWT response\");\n            throw err;\n        }\n    };\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { CryptoUtils, Logger } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { MetadataService } from \"./MetadataService\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\n\n/**\n * @internal\n */\nexport interface ExchangeCodeArgs {\n    client_id?: string;\n    client_secret?: string;\n    redirect_uri?: string;\n\n    grant_type?: string;\n    code: string;\n    code_verifier?: string;\n}\n\n/**\n * @internal\n */\nexport interface ExchangeRefreshTokenArgs {\n    client_id?: string;\n    client_secret?: string;\n\n    grant_type?: string;\n    refresh_token: string;\n    scope?: string;\n\n    timeoutInSeconds?: number;\n}\n\n/**\n * @internal\n */\nexport interface RevokeArgs {\n    token: string;\n    token_type_hint?: \"access_token\" | \"refresh_token\";\n}\n\n/**\n * @internal\n */\nexport interface DeviceAccessTokenArgs {\n    client_id?: string;\n    client_secret?: string;\n    device_code: string;\n}\n\n/**\n * @internal\n */\nexport class TokenClient {\n    private readonly _logger = new Logger(\"TokenClient\");\n    private readonly _jsonService = new JsonService();\n\n    public constructor(\n        private readonly _settings: OidcClientSettingsStore,\n        private readonly _metadataService: MetadataService,\n    ) {}\n\n    public async exchangeCode({\n        grant_type = \"authorization_code\",\n        redirect_uri = this._settings.redirect_uri,\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        ...args\n    }: ExchangeCodeArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeCode\");\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n        if (!redirect_uri) {\n            logger.throw(new Error(\"A redirect_uri is required\"));\n        }\n        if (!args.code) {\n            logger.throw(new Error(\"A code is required\"));\n        }\n        if (!args.code_verifier) {\n            logger.throw(new Error(\"A code_verifier is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type, redirect_uri });\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (!client_secret) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    public async exchangeRefreshToken({\n        grant_type = \"refresh_token\",\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n        timeoutInSeconds,\n        ...args\n    }: ExchangeRefreshTokenArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"exchangeRefreshToken\");\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n        if (!args.refresh_token) {\n            logger.throw(new Error(\"A refresh_token is required\"));\n        }\n\n        const params = new URLSearchParams({ grant_type });\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (!client_secret) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth, timeoutInSeconds });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n\n    /**\n     * Revoke an access or refresh token.\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc7009#section-2.1\n     */\n    public async revoke(args: RevokeArgs): Promise<void> {\n        const logger = this._logger.create(\"revoke\");\n        if (!args.token) {\n            logger.throw(new Error(\"A token is required\"));\n        }\n\n        const url = await this._metadataService.getRevocationEndpoint(false);\n\n        logger.debug(`got revocation endpoint, revoking ${args.token_type_hint ?? \"default token type\"}`);\n\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(args)) {\n            if (value != null) {\n                params.set(key, value);\n            }\n        }\n        params.set(\"client_id\", this._settings.client_id);\n        if (this._settings.client_secret) {\n            params.set(\"client_secret\", this._settings.client_secret);\n        }\n\n        await this._jsonService.postForm(url, { body: params });\n        logger.debug(\"got response\");\n    }\n\n    public async deviceAccessToken({\n        device_code,\n        client_id = this._settings.client_id,\n        client_secret = this._settings.client_secret,\n    }: DeviceAccessTokenArgs): Promise<Record<string, unknown>> {\n        const logger = this._logger.create(\"deviceAccessToken\");\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n        if (!device_code) {\n            logger.throw(new Error(\"A device_code is required\"));\n        }\n\n        const params = new URLSearchParams({ device_code, grant_type: \"urn:ietf:params:oauth:grant-type:device_code\" });\n        let basicAuth: string | undefined;\n        switch (this._settings.client_authentication) {\n            case \"client_secret_basic\":\n                if (!client_secret) {\n                    logger.throw(new Error(\"A client_secret is required\"));\n                    throw null; // https://github.com/microsoft/TypeScript/issues/46972\n                }\n                basicAuth = CryptoUtils.generateBasicAuth(client_id, client_secret);\n                break;\n            case \"client_secret_post\":\n                params.append(\"client_id\", client_id);\n                if (client_secret) {\n                    params.append(\"client_secret\", client_secret);\n                }\n                break;\n        }\n\n        const url = await this._metadataService.getTokenEndpoint(false);\n        logger.debug(\"got token endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params, basicAuth });\n        logger.debug(\"got response\");\n\n        return response;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, JwtUtils } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport type { MetadataService } from \"./MetadataService\";\nimport { UserInfoService } from \"./UserInfoService\";\nimport { TokenClient } from \"./TokenClient\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { SigninState } from \"./SigninState\";\nimport type { SigninResponse } from \"./SigninResponse\";\nimport type { State } from \"./State\";\nimport type { SignoutResponse } from \"./SignoutResponse\";\nimport type { UserProfile } from \"./User\";\nimport type { RefreshState } from \"./RefreshState\";\nimport type { JwtClaims, IdTokenClaims } from \"./Claims\";\n\n/**\n * Derived from the following sets of claims:\n * - {@link https://datatracker.ietf.org/doc/html/rfc7519.html#section-4.1}\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#IDToken}\n * - {@link https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken}\n *\n * @internal\n */\nconst ProtocolClaims = [\n    \"iss\",\n    // \"sub\" should never be excluded, we need access to it internally\n    \"aud\",\n    \"exp\",\n    \"nbf\",\n    \"iat\",\n    \"jti\",\n    \"auth_time\",\n    \"nonce\",\n    \"acr\",\n    \"amr\",\n    \"azp\",\n    // https://openid.net/specs/openid-connect-core-1_0.html#CodeIDToken\n    \"at_hash\",\n] as const;\n\n/**\n * @internal\n */\nexport class ResponseValidator {\n    protected readonly _logger = new Logger(\"ResponseValidator\");\n    protected readonly _userInfoService = new UserInfoService(this._metadataService);\n    protected readonly _tokenClient = new TokenClient(this._settings, this._metadataService);\n\n    public constructor(\n        protected readonly _settings: OidcClientSettingsStore,\n        protected readonly _metadataService: MetadataService,\n    ) {}\n\n    public async validateSigninResponse(response: SigninResponse, state: SigninState): Promise<void> {\n        const logger = this._logger.create(\"validateSigninResponse\");\n\n        this._processSigninState(response, state);\n        logger.debug(\"state processed\");\n\n        await this._processCode(response, state);\n        logger.debug(\"code processed\");\n\n        if (response.isOpenId) {\n            this._validateIdTokenAttributes(response);\n        }\n        logger.debug(\"tokens validated\");\n\n        await this._processClaims(response, state?.skipUserInfo, response.isOpenId);\n        logger.debug(\"claims processed\");\n    }\n\n    public async validateRefreshResponse(response: SigninResponse, state: RefreshState): Promise<void> {\n        const logger = this._logger.create(\"validateRefreshResponse\");\n\n        response.userState = state.data;\n        // if there's no session_state on the response, copy over session_state from original request\n        response.session_state ??= state.session_state;\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\n        response.scope ??= state.scope;\n\n        // OpenID Connect Core 1.0 says that id_token is optional in refresh response:\n        // https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokenResponse\n        const hasIdToken = response.isOpenId && !!response.id_token;\n        if (hasIdToken) {\n            this._validateIdTokenAttributes(response, state.id_token);\n            logger.debug(\"ID Token validated\");\n        }\n\n        await this._processClaims(response, false, hasIdToken);\n        logger.debug(\"claims processed\");\n    }\n\n    public validateSignoutResponse(response: SignoutResponse, state: State): void {\n        const logger = this._logger.create(\"validateSignoutResponse\");\n        if (state.id !== response.state) {\n            logger.throw(new Error(\"State does not match\"));\n        }\n\n        // now that we know the state matches, take the stored data\n        // and set it into the response so callers can get their state\n        // this is important for both success & error outcomes\n        logger.debug(\"state validated\");\n        response.userState = state.data;\n\n        if (response.error) {\n            logger.warn(\"Response was error\", response.error);\n            throw new ErrorResponse(response);\n        }\n    }\n\n    protected _processSigninState(response: SigninResponse, state: SigninState): void {\n        const logger = this._logger.create(\"_processSigninState\");\n        if (state.id !== response.state) {\n            logger.throw(new Error(\"State does not match\"));\n        }\n\n        if (!state.client_id) {\n            logger.throw(new Error(\"No client_id on state\"));\n        }\n\n        if (!state.authority) {\n            logger.throw(new Error(\"No authority on state\"));\n        }\n\n        // ensure we're using the correct authority\n        if (this._settings.authority !== state.authority) {\n            logger.throw(new Error(\"authority mismatch on settings vs. signin state\"));\n        }\n        if (this._settings.client_id && this._settings.client_id !== state.client_id) {\n            logger.throw(new Error(\"client_id mismatch on settings vs. signin state\"));\n        }\n\n        // now that we know the state matches, take the stored data\n        // and set it into the response so callers can get their state\n        // this is important for both success & error outcomes\n        logger.debug(\"state validated\");\n        response.userState = state.data;\n        // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request\n        response.scope ??= state.scope;\n\n        if (response.error) {\n            logger.warn(\"Response was error\", response.error);\n            throw new ErrorResponse(response);\n        }\n\n        if (state.code_verifier && !response.code) {\n            logger.throw(new Error(\"Expected code in response\"));\n        }\n\n        if (!state.code_verifier && response.code) {\n            logger.throw(new Error(\"Unexpected code in response\"));\n        }\n    }\n\n    protected async _processClaims(response: SigninResponse, skipUserInfo = false, validateSub = true): Promise<void> {\n        const logger = this._logger.create(\"_processClaims\");\n        response.profile = this._filterProtocolClaims(response.profile);\n\n        if (skipUserInfo || !this._settings.loadUserInfo || !response.access_token) {\n            logger.debug(\"not loading user info\");\n            return;\n        }\n\n        logger.debug(\"loading user info\");\n        const claims = await this._userInfoService.getClaims(response.access_token);\n        logger.debug(\"user info claims received from user info endpoint\");\n\n        if (validateSub && claims.sub !== response.profile.sub) {\n            logger.throw(new Error(\"subject from UserInfo response does not match subject in ID Token\"));\n        }\n\n        response.profile = this._mergeClaims(response.profile, this._filterProtocolClaims(claims as IdTokenClaims));\n        logger.debug(\"user info claims received, updated profile:\", response.profile);\n    }\n\n    protected _mergeClaims(claims1: UserProfile, claims2: JwtClaims): UserProfile {\n        const result = { ...claims1 };\n\n        for (const [claim, values] of Object.entries(claims2)) {\n            for (const value of Array.isArray(values) ? values : [values]) {\n                const previousValue = result[claim];\n                if (!previousValue) {\n                    result[claim] = value;\n                }\n                else if (Array.isArray(previousValue)) {\n                    if (!previousValue.includes(value)) {\n                        previousValue.push(value);\n                    }\n                }\n                else if (result[claim] !== value) {\n                    if (typeof value === \"object\" && this._settings.mergeClaims) {\n                        result[claim] = this._mergeClaims(previousValue as UserProfile, value);\n                    }\n                    else {\n                        result[claim] = [previousValue, value];\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    protected _filterProtocolClaims(claims: UserProfile): UserProfile {\n        const result = { ...claims };\n\n        if (this._settings.filterProtocolClaims) {\n            for (const type of ProtocolClaims) {\n                delete result[type];\n            }\n        }\n\n        return result;\n    }\n\n    protected async _processCode(response: SigninResponse, state: SigninState): Promise<void> {\n        const logger = this._logger.create(\"_processCode\");\n        if (response.code) {\n            logger.debug(\"Validating code\");\n            const tokenResponse = await this._tokenClient.exchangeCode({\n                client_id: state.client_id,\n                client_secret: state.client_secret,\n                code: response.code,\n                redirect_uri: state.redirect_uri,\n                code_verifier: state.code_verifier,\n                ...state.extraTokenParams,\n            });\n            Object.assign(response, tokenResponse);\n        } else {\n            logger.debug(\"No code to process\");\n        }\n    }\n\n    protected _validateIdTokenAttributes(response: SigninResponse, currentToken?: string): void {\n        const logger = this._logger.create(\"_validateIdTokenAttributes\");\n\n        logger.debug(\"decoding ID Token JWT\");\n        const profile = JwtUtils.decode(response.id_token ?? \"\");\n\n        if (!profile.sub) {\n            logger.throw(new Error(\"ID Token is missing a subject claim\"));\n        }\n\n        if (currentToken) {\n            const current = JwtUtils.decode(currentToken);\n            if (current.sub !== profile.sub) {\n                logger.throw(new Error(\"sub in id_token does not match current sub\"));\n            }\n            if (current.auth_time && current.auth_time !== profile.auth_time) {\n                logger.throw(new Error(\"auth_time in id_token does not match original auth_time\"));\n            }\n            if (current.azp && current.azp !== profile.azp) {\n                logger.throw(new Error(\"azp in id_token does not match original azp\"));\n            }\n            if (!current.azp && profile.azp) {\n                logger.throw(new Error(\"azp not in id_token, but present in original id_token\"));\n            }\n        }\n\n        response.profile = profile as UserProfile;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, CryptoUtils, Timer } from \"./utils\";\nimport type { StateStore } from \"./StateStore\";\n\n/**\n * @public\n */\nexport class State {\n    public readonly id: string;\n    public readonly created: number;\n    public readonly request_type: string | undefined;\n\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    public readonly data: unknown | undefined;\n\n    public constructor(args: {\n        id?: string;\n        data?: unknown;\n        created?: number;\n        request_type?: string;\n    }) {\n        this.id = args.id || CryptoUtils.generateUUIDv4();\n        this.data = args.data;\n\n        if (args.created && args.created > 0) {\n            this.created = args.created;\n        }\n        else {\n            this.created = Timer.getEpochTime();\n        }\n        this.request_type = args.request_type;\n    }\n\n    public toStorageString(): string {\n        new Logger(\"State\").create(\"toStorageString\");\n        return JSON.stringify({\n            id: this.id,\n            data: this.data,\n            created: this.created,\n            request_type: this.request_type,\n        });\n    }\n\n    public static fromStorageString(storageString: string): State {\n        Logger.createStatic(\"State\", \"fromStorageString\");\n        return new State(JSON.parse(storageString));\n    }\n\n    public static async clearStaleState(storage: StateStore, age: number): Promise<void> {\n        const logger = Logger.createStatic(\"State\", \"clearStaleState\");\n        const cutoff = Timer.getEpochTime() - age;\n\n        const keys = await storage.getAllKeys();\n        logger.debug(\"got keys\", keys);\n\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            const item = await storage.get(key);\n            let remove = false;\n\n            if (item) {\n                try {\n                    const state = State.fromStorageString(item);\n\n                    logger.debug(\"got item from key:\", key, state.created);\n                    if (state.created <= cutoff) {\n                        remove = true;\n                    }\n                }\n                catch (err) {\n                    logger.error(\"Error parsing state for key:\", key, err);\n                    remove = true;\n                }\n            }\n            else {\n                logger.debug(\"no item in storage for key:\", key);\n                remove = true;\n            }\n\n            if (remove) {\n                logger.debug(\"removed item for key:\", key);\n                void storage.remove(key);\n            }\n        }\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, CryptoUtils } from \"./utils\";\nimport { State } from \"./State\";\n\n/**\n * @public\n */\nexport class SigninState extends State {\n    // isCode\n    /** The same code_verifier that was used to obtain the authorization_code via PKCE. */\n    public readonly code_verifier: string | undefined;\n    /** Used to secure authorization code grants via Proof Key for Code Exchange (PKCE). */\n    public readonly code_challenge: string | undefined;\n\n    // to ensure state still matches settings\n    /** @see {@link OidcClientSettings.authority} */\n    public readonly authority: string;\n    /** @see {@link OidcClientSettings.client_id} */\n    public readonly client_id: string;\n    /** @see {@link OidcClientSettings.redirect_uri} */\n    public readonly redirect_uri: string;\n    /** @see {@link OidcClientSettings.scope} */\n    public readonly scope: string;\n    /** @see {@link OidcClientSettings.client_secret} */\n    public readonly client_secret: string | undefined;\n    /** @see {@link OidcClientSettings.extraTokenParams} */\n    public readonly extraTokenParams: Record<string, unknown> | undefined;\n    /** @see {@link OidcClientSettings.response_mode} */\n    public readonly response_mode: \"query\" | \"fragment\" | undefined;\n\n    public readonly skipUserInfo: boolean | undefined;\n\n    public constructor(args: {\n        id?: string;\n        data?: unknown;\n        created?: number;\n        request_type?: string;\n\n        code_verifier?: string | boolean;\n        authority: string;\n        client_id: string;\n        redirect_uri: string;\n        scope: string;\n        client_secret?: string;\n        extraTokenParams?: Record<string, unknown>;\n        response_mode?: \"query\" | \"fragment\";\n        skipUserInfo?: boolean;\n    }) {\n        super(args);\n\n        if (args.code_verifier === true) {\n            this.code_verifier = CryptoUtils.generateCodeVerifier();\n        }\n        else if (args.code_verifier) {\n            this.code_verifier = args.code_verifier;\n        }\n\n        if (this.code_verifier) {\n            this.code_challenge = CryptoUtils.generateCodeChallenge(this.code_verifier);\n        }\n\n        this.authority = args.authority;\n        this.client_id = args.client_id;\n        this.redirect_uri = args.redirect_uri;\n        this.scope = args.scope;\n        this.client_secret = args.client_secret;\n        this.extraTokenParams = args.extraTokenParams;\n\n        this.response_mode = args.response_mode;\n        this.skipUserInfo = args.skipUserInfo;\n    }\n\n    public toStorageString(): string {\n        new Logger(\"SigninState\").create(\"toStorageString\");\n        return JSON.stringify({\n            id: this.id,\n            data: this.data,\n            created: this.created,\n            request_type: this.request_type,\n\n            code_verifier: this.code_verifier,\n            authority: this.authority,\n            client_id: this.client_id,\n            redirect_uri: this.redirect_uri,\n            scope: this.scope,\n            client_secret: this.client_secret,\n            extraTokenParams : this.extraTokenParams,\n            response_mode: this.response_mode,\n            skipUserInfo: this.skipUserInfo,\n        });\n    }\n\n    public static fromStorageString(storageString: string): SigninState {\n        Logger.createStatic(\"SigninState\", \"fromStorageString\");\n        const data = JSON.parse(storageString);\n        return new SigninState(data);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { SigninState } from \"./SigninState\";\n\n/**\n * @public\n */\nexport interface SigninRequestArgs {\n    // mandatory\n    url: string;\n    authority: string;\n    client_id: string;\n    redirect_uri: string;\n    response_type: string;\n    scope: string;\n\n    // optional\n    prompt?: string;\n    display?: string;\n    max_age?: number;\n    ui_locales?: string;\n    id_token_hint?: string;\n    login_hint?: string;\n    acr_values?: string;\n    resource?: string;\n    response_mode?: \"query\" | \"fragment\" ;\n    request?: string;\n    request_uri?: string;\n    extraQueryParams?: Record<string, string | number | boolean>;\n    request_type?: string;\n    client_secret?: string;\n    extraTokenParams?: Record<string, unknown>;\n    skipUserInfo?: boolean;\n    nonce?: string; \n\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state_data?: unknown;\n}\n\n/**\n * @public\n */\nexport class SigninRequest {\n    private readonly _logger = new Logger(\"SigninRequest\");\n\n    public readonly url: string;\n    public readonly state: SigninState;\n\n    public constructor({\n        // mandatory\n        url, authority, client_id, redirect_uri, response_type, scope,\n        // optional\n        state_data, response_mode, request_type, client_secret, nonce,\n        skipUserInfo,\n        extraQueryParams,\n        extraTokenParams,\n        ...optionalParams\n    }: SigninRequestArgs) {\n        if (!url) {\n            this._logger.error(\"ctor: No url passed\");\n            throw new Error(\"url\");\n        }\n        if (!client_id) {\n            this._logger.error(\"ctor: No client_id passed\");\n            throw new Error(\"client_id\");\n        }\n        if (!redirect_uri) {\n            this._logger.error(\"ctor: No redirect_uri passed\");\n            throw new Error(\"redirect_uri\");\n        }\n        if (!response_type) {\n            this._logger.error(\"ctor: No response_type passed\");\n            throw new Error(\"response_type\");\n        }\n        if (!scope) {\n            this._logger.error(\"ctor: No scope passed\");\n            throw new Error(\"scope\");\n        }\n        if (!authority) {\n            this._logger.error(\"ctor: No authority passed\");\n            throw new Error(\"authority\");\n        }\n\n        this.state = new SigninState({\n            data: state_data,\n            request_type,\n            code_verifier: true,\n            client_id, authority, redirect_uri,\n            response_mode,\n            client_secret, scope, extraTokenParams,\n            skipUserInfo,\n        });\n\n        const parsedUrl = new URL(url);\n        parsedUrl.searchParams.append(\"client_id\", client_id);\n        parsedUrl.searchParams.append(\"redirect_uri\", redirect_uri);\n        parsedUrl.searchParams.append(\"response_type\", response_type);\n        parsedUrl.searchParams.append(\"scope\", scope);\n        if (nonce) {\n            parsedUrl.searchParams.append(\"nonce\", nonce);\n        }\n\n        parsedUrl.searchParams.append(\"state\", this.state.id);\n        if (this.state.code_challenge) {\n            parsedUrl.searchParams.append(\"code_challenge\", this.state.code_challenge);\n            parsedUrl.searchParams.append(\"code_challenge_method\", \"S256\");\n        }\n\n        for (const [key, value] of Object.entries({ response_mode, ...optionalParams, ...extraQueryParams })) {\n            if (value != null) {\n                parsedUrl.searchParams.append(key, value.toString());\n            }\n        }\n\n        this.url = parsedUrl.href;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Timer } from \"./utils\";\nimport type { UserProfile } from \"./User\";\n\nconst OidcScope = \"openid\";\n\n/**\n * @public\n */\nexport class SigninResponse {\n    // props present in the initial callback response regardless of success\n    public readonly state: string | null;\n    /** @see {@link User.session_state} */\n    public session_state: string | null;\n\n    // error props\n    /** @see {@link ErrorResponse.error} */\n    public readonly error: string | null;\n    /** @see {@link ErrorResponse.error_description} */\n    public readonly error_description: string | null;\n    /** @see {@link ErrorResponse.error_uri} */\n    public readonly error_uri: string | null;\n\n    // success props\n    public readonly code: string | null;\n\n    // props set after validation\n    /** @see {@link User.id_token} */\n    public id_token?: string;\n    /** @see {@link User.access_token} */\n    public access_token = \"\";\n    /** @see {@link User.token_type} */\n    public token_type = \"\";\n    /** @see {@link User.refresh_token} */\n    public refresh_token?: string;\n    /** @see {@link User.scope} */\n    public scope?: string;\n    /** @see {@link User.expires_at} */\n    public expires_at?: number;\n\n    /** custom state data set during the initial signin request */\n    public userState: unknown;\n\n    /** @see {@link User.profile} */\n    public profile: UserProfile = {} as UserProfile;\n\n    public constructor(params: URLSearchParams) {\n        this.state = params.get(\"state\");\n        this.session_state = params.get(\"session_state\");\n\n        this.error = params.get(\"error\");\n        this.error_description = params.get(\"error_description\");\n        this.error_uri = params.get(\"error_uri\");\n\n        this.code = params.get(\"code\");\n    }\n\n    public get expires_in(): number | undefined {\n        if (this.expires_at === undefined) {\n            return undefined;\n        }\n        return this.expires_at - Timer.getEpochTime();\n    }\n    public set expires_in(value: number | undefined) {\n        // spec expects a number, but normalize here just in case\n        if (typeof value === \"string\") value = Number(value);\n        if (value !== undefined && value >= 0) {\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\n        }\n    }\n\n    public get isOpenId(): boolean {\n        return this.scope?.split(\" \").includes(OidcScope) || !!this.id_token;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { State } from \"./State\";\n\n/**\n * @public\n */\nexport interface SignoutRequestArgs {\n    // mandatory\n    url: string;\n\n    // optional\n    state_data?: unknown;\n    id_token_hint?: string;\n    post_logout_redirect_uri?: string;\n    extraQueryParams?: Record<string, string | number | boolean>;\n    request_type?: string;\n}\n\n/**\n * @public\n */\nexport class SignoutRequest {\n    private readonly _logger = new Logger(\"SignoutRequest\");\n\n    public readonly url: string;\n    public readonly state?: State;\n\n    public constructor({\n        url,\n        state_data, id_token_hint, post_logout_redirect_uri, extraQueryParams, request_type,\n    }: SignoutRequestArgs) {\n        if (!url) {\n            this._logger.error(\"ctor: No url passed\");\n            throw new Error(\"url\");\n        }\n\n        const parsedUrl = new URL(url);\n        if (id_token_hint) {\n            parsedUrl.searchParams.append(\"id_token_hint\", id_token_hint);\n        }\n\n        if (post_logout_redirect_uri) {\n            parsedUrl.searchParams.append(\"post_logout_redirect_uri\", post_logout_redirect_uri);\n\n            if (state_data) {\n                this.state = new State({ data: state_data, request_type });\n\n                parsedUrl.searchParams.append(\"state\", this.state.id);\n            }\n        }\n\n        for (const [key, value] of Object.entries({ ...extraQueryParams })) {\n            if (value != null) {\n                parsedUrl.searchParams.append(key, value.toString());\n            }\n        }\n\n        this.url = parsedUrl.href;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * @public\n */\nexport class SignoutResponse {\n    public readonly state: string | null;\n\n    // error props\n    /** @see {@link ErrorResponse.error} */\n    public error: string | null;\n    /** @see {@link ErrorResponse.error_description} */\n    public error_description: string | null;\n    /** @see {@link ErrorResponse.error_uri} */\n    public error_uri: string | null;\n\n    /** custom state data set during the initial signin request */\n    public userState: unknown;\n\n    public constructor(params: URLSearchParams) {\n        this.state = params.get(\"state\");\n\n        this.error = params.get(\"error\");\n        this.error_description = params.get(\"error_description\");\n        this.error_uri = params.get(\"error_uri\");\n    }\n}\n", "// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { JsonService } from \"./JsonService\";\nimport type { MetadataService } from \"./MetadataService\";\nimport type { OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { TokenClient } from \"./TokenClient\";\n\n/**\n * @internal\n */\nexport interface DeviceAuthorizationRequest {\n    client_id: string;\n    scope?: string;\n}\n\n/**\n * @internal\n */\nexport interface DeviceAuthorizationRequestArgs {\n    client_id?: string;\n    scope?: string;\n    nonce?: string;\n}\n\n/**\n * @internal\n */\nexport interface DeviceAuthorizationResponse {\n    device_code: string;\n    user_code: string;\n    verification_uri: string;\n    verification_uri_complete?: string;\n    expires_in: number;\n    interval?: number;\n}\n\n/**\n * @internal\n */\nexport interface RevokeArgs {\n    token: string;\n    token_type_hint?: \"access_token\" | \"refresh_token\";\n}\n\n/**\n * @internal\n */\nexport class DeviceAuthorizationClient {\n    private readonly _logger = new Logger(\"TokenClient\");\n    private readonly _jsonService = new JsonService();\n    private _responseInProgress?: DeviceAuthorizationResponse;\n\n    public constructor(\n        private readonly _settings: OidcClientSettingsStore,\n        private readonly _metadataService: MetadataService,\n        private readonly _tokenClient: TokenClient,\n    ) {}\n\n    public async startDeviceAuthorization({\n        client_id = this._settings.client_id,\n        scope,\n        nonce,\n    }: DeviceAuthorizationRequestArgs): Promise<DeviceAuthorizationResponse> {\n        const logger = this._logger.create(\"startDeviceAuthorization\");\n\n        if (!client_id) {\n            logger.throw(new Error(\"A client_id is required\"));\n        }\n\n        const params = new URLSearchParams({ client_id, scope: scope ?? this._settings.scope });\n        if (nonce) {\n            params.set(\"nonce\", nonce);\n        }\n\n        const url = (await this._metadataService.getMetadata()).device_authorization_endpoint;\n        if (!url) {\n            logger.throw(new Error(\"No device_authorization_endpoint given\"));\n            throw null;\n        }\n\n        logger.debug(\"got device authorization endpoint\");\n\n        const response = await this._jsonService.postForm(url, { body: params });\n        logger.debug(\"got response\");\n\n        this._responseInProgress = response as unknown as DeviceAuthorizationResponse;\n\n        return this._responseInProgress;\n    }\n\n    public async waitForDeviceAuthorization({ device_code }: DeviceAuthorizationResponse): Promise<Record<string, unknown>> {\n        return await this._tokenClient.deviceAccessToken({\n            device_code,\n        });\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, UrlUtils } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport { OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport { ResponseValidator } from \"./ResponseValidator\";\nimport { MetadataService } from \"./MetadataService\";\nimport type { RefreshState } from \"./RefreshState\";\nimport { SigninRequest } from \"./SigninRequest\";\nimport { SigninResponse } from \"./SigninResponse\";\nimport { SignoutRequest, SignoutRequestArgs } from \"./SignoutRequest\";\nimport { SignoutResponse } from \"./SignoutResponse\";\nimport { SigninState } from \"./SigninState\";\nimport { State } from \"./State\";\nimport { TokenClient } from \"./TokenClient\";\nimport { DeviceAuthorizationClient, DeviceAuthorizationRequestArgs, DeviceAuthorizationResponse } from \"./DeviceAuthorizationClient\";\n\n/**\n * @public\n */\nexport interface CreateSigninRequestArgs {\n    redirect_uri?: string;\n    response_type?: string;\n    scope?: string;\n    nonce?: string;\n\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    state?: unknown;\n\n    prompt?: string;\n    display?: string;\n    max_age?: number;\n    ui_locales?: string;\n    id_token_hint?: string;\n    login_hint?: string;\n    acr_values?: string;\n    resource?: string;\n    response_mode?: \"query\" | \"fragment\";\n    request?: string;\n    request_uri?: string;\n    extraQueryParams?: Record<string, string | number | boolean>;\n    request_type?: string;\n    client_secret?: string;\n    extraTokenParams?: Record<string, unknown>;\n    skipUserInfo?: boolean;\n}\n\n/**\n * @public\n */\nexport interface UseRefreshTokenArgs {\n    state: RefreshState;\n    timeoutInSeconds?: number;\n}\n\n/**\n * @public\n */\nexport type CreateSignoutRequestArgs = Omit<SignoutRequestArgs, \"url\" | \"state_data\"> & { state?: unknown };\n\n/**\n * Provides the raw OIDC/OAuth2 protocol support for the authorization endpoint and the end session endpoint in the\n * authorization server. It provides a bare-bones protocol implementation and is used by the UserManager class.\n * Only use this class if you simply want protocol support without the additional management features of the\n * UserManager class.\n *\n * @public\n */\nexport class OidcClient {\n    public readonly settings: OidcClientSettingsStore;\n    protected readonly _logger = new Logger(\"OidcClient\");\n\n    public readonly metadataService: MetadataService;\n    protected readonly _validator: ResponseValidator;\n    protected readonly _tokenClient: TokenClient;\n    protected readonly _deviceAuthorizationClient: DeviceAuthorizationClient;\n\n    public constructor(settings: OidcClientSettings) {\n        this.settings = new OidcClientSettingsStore(settings);\n\n        this.metadataService = new MetadataService(this.settings);\n        this._validator = new ResponseValidator(this.settings, this.metadataService);\n        this._tokenClient = new TokenClient(this.settings, this.metadataService);\n        this._deviceAuthorizationClient = new DeviceAuthorizationClient(this.settings, this.metadataService, this._tokenClient);\n    }\n\n    public async createSigninRequest({\n        state,\n        request,\n        request_uri,\n        request_type,\n        id_token_hint,\n        login_hint,\n        skipUserInfo,\n        nonce,\n        response_type = this.settings.response_type,\n        scope = this.settings.scope,\n        redirect_uri = this.settings.redirect_uri,\n        prompt = this.settings.prompt,\n        display = this.settings.display,\n        max_age = this.settings.max_age,\n        ui_locales = this.settings.ui_locales,\n        acr_values = this.settings.acr_values,\n        resource = this.settings.resource,\n        response_mode = this.settings.response_mode,\n        extraQueryParams = this.settings.extraQueryParams,\n        extraTokenParams = this.settings.extraTokenParams,\n    }: CreateSigninRequestArgs): Promise<SigninRequest> {\n        const logger = this._logger.create(\"createSigninRequest\");\n\n        if (response_type !== \"code\") {\n            throw new Error(\"Only the Authorization Code flow (with PKCE) is supported\");\n        }\n\n        const url = await this.metadataService.getAuthorizationEndpoint();\n        logger.debug(\"Received authorization endpoint\", url);\n\n        const signinRequest = new SigninRequest({\n            url,\n            authority: this.settings.authority,\n            client_id: this.settings.client_id,\n            redirect_uri,\n            response_type,\n            scope,\n            state_data: state,\n            prompt, display, max_age, ui_locales, id_token_hint, login_hint, acr_values,\n            resource, request, request_uri, extraQueryParams, extraTokenParams, request_type, response_mode,\n            client_secret: this.settings.client_secret,\n            skipUserInfo,\n            nonce,\n        });\n\n        // house cleaning\n        await this.clearStaleState();\n\n        const signinState = signinRequest.state;\n        await this.settings.stateStore.set(signinState.id, signinState.toStorageString());\n        return signinRequest;\n    }\n\n    public async readSigninResponseState(url: string, removeState = false): Promise<{ state: SigninState; response: SigninResponse }> {\n        const logger = this._logger.create(\"readSigninResponseState\");\n\n        const response = new SigninResponse(UrlUtils.readParams(url, this.settings.response_mode));\n        if (!response.state) {\n            logger.throw(new Error(\"No state in response\"));\n            // need to throw within this function's body for type narrowing to work\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n        if (!storedStateString) {\n            logger.throw(new Error(\"No matching state found in storage\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const state = SigninState.fromStorageString(storedStateString);\n        return { state, response };\n    }\n\n    public async processSigninResponse(url: string): Promise<SigninResponse> {\n        const logger = this._logger.create(\"processSigninResponse\");\n\n        const { state, response } = await this.readSigninResponseState(url, true);\n        logger.debug(\"received state from storage; validating response\");\n        await this._validator.validateSigninResponse(response, state);\n        return response;\n    }\n\n    public async useRefreshToken({\n        state,\n        timeoutInSeconds,\n    }: UseRefreshTokenArgs): Promise<SigninResponse> {\n        const logger = this._logger.create(\"useRefreshToken\");\n\n        const result = await this._tokenClient.exchangeRefreshToken({\n            refresh_token: state.refresh_token,\n            scope: state.scope,\n            timeoutInSeconds,\n        });\n        const response = new SigninResponse(new URLSearchParams());\n        Object.assign(response, result);\n        logger.debug(\"validating response\", response);\n        await this._validator.validateRefreshResponse(response, state);\n        return response;\n    }\n\n    public async createSignoutRequest({\n        state,\n        id_token_hint,\n        request_type,\n        post_logout_redirect_uri = this.settings.post_logout_redirect_uri,\n        extraQueryParams = this.settings.extraQueryParams,\n    }: CreateSignoutRequestArgs = {}): Promise<SignoutRequest> {\n        const logger = this._logger.create(\"createSignoutRequest\");\n\n        const url = await this.metadataService.getEndSessionEndpoint();\n        if (!url) {\n            logger.throw(new Error(\"No end session endpoint\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        logger.debug(\"Received end session endpoint\", url);\n\n        const request = new SignoutRequest({\n            url,\n            id_token_hint,\n            post_logout_redirect_uri,\n            state_data: state,\n            extraQueryParams,\n            request_type,\n        });\n\n        // house cleaning\n        await this.clearStaleState();\n\n        const signoutState = request.state;\n        if (signoutState) {\n            logger.debug(\"Signout request has state to persist\");\n            await this.settings.stateStore.set(signoutState.id, signoutState.toStorageString());\n        }\n\n        return request;\n    }\n\n    public async readSignoutResponseState(url: string, removeState = false): Promise<{ state: State | undefined; response: SignoutResponse }> {\n        const logger = this._logger.create(\"readSignoutResponseState\");\n\n        const response = new SignoutResponse(UrlUtils.readParams(url, this.settings.response_mode));\n        if (!response.state) {\n            logger.debug(\"No state in response\");\n\n            if (response.error) {\n                logger.warn(\"Response was error:\", response.error);\n                throw new ErrorResponse(response);\n            }\n\n            return { state: undefined, response };\n        }\n\n        const storedStateString = await this.settings.stateStore[removeState ? \"remove\" : \"get\"](response.state);\n        if (!storedStateString) {\n            logger.throw(new Error(\"No matching state found in storage\"));\n            throw null; // https://github.com/microsoft/TypeScript/issues/46972\n        }\n\n        const state = State.fromStorageString(storedStateString);\n        return { state, response };\n    }\n\n    public async processSignoutResponse(url: string): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"processSignoutResponse\");\n\n        const { state, response } = await this.readSignoutResponseState(url, true);\n        if (state) {\n            logger.debug(\"Received state from storage; validating response\");\n            this._validator.validateSignoutResponse(response, state);\n        } else {\n            logger.debug(\"No state from storage; skipping response validation\");\n        }\n\n        return response;\n    }\n\n    public clearStaleState(): Promise<void> {\n        this._logger.create(\"clearStaleState\");\n        return State.clearStaleState(this.settings.stateStore, this.settings.staleStateAgeInSeconds);\n    }\n\n    public async revokeToken(token: string, type?: \"access_token\" | \"refresh_token\"): Promise<void> {\n        this._logger.create(\"revokeToken\");\n        return await this._tokenClient.revoke({\n            token,\n            token_type_hint: type,\n        });\n    }\n    \n    public async startDeviceAuthorization(args: DeviceAuthorizationRequestArgs): Promise<DeviceAuthorizationResponse> {\n        this._logger.create(\"startDeviceAuthorization\");\n        return await this._deviceAuthorizationClient.startDeviceAuthorization(args);\n    }\n\n    public async waitForDeviceAuthorization(params: DeviceAuthorizationResponse): Promise<Record<string, unknown>> {\n        this._logger.create(\"waitForDeviceAuthorization\");\n        let interval = (params.interval ?? 5) * 1000; // poll interval\n        const expiration = Date.now() + params.expires_in * 1000;\n        do {\n            try {\n                const res = await this._deviceAuthorizationClient.waitForDeviceAuthorization(params);\n                return res;\n            } catch (e) {\n                if (e instanceof ErrorResponse) {\n                    switch (e.error) {\n                        case \"authorization_pending\":\n                            break;\n                        case \"slow_down\":\n                            interval += 5000;\n                            break;\n                        case \"access_denied\":\n                        case \"expired_token\":\n                            return { error: e.error, error_description: e.error_description, error_uri: e.error_uri, session_state: e.session_state };\n                    }\n                }\n            }\n            this._logger.info(\"Waiting for device authorization\", { interval });\n            await new Promise(resolve => setTimeout(resolve, interval));\n        } while (Date.now() < expiration);\n        return { error: \"expired\" };\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"./utils\";\nimport { CheckSessionIFrame } from \"./CheckSessionIFrame\";\nimport type { UserManager } from \"./UserManager\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport class SessionMonitor {\n    private readonly _logger = new Logger(\"SessionMonitor\");\n\n    private _sub: string | undefined;\n    private _sid: string | undefined;\n    private _checkSessionIFrame?: CheckSessionIFrame;\n\n    public constructor(private readonly _userManager: UserManager) {\n        if (!_userManager) {\n            this._logger.throw(new Error(\"No user manager passed\"));\n        }\n\n        this._userManager.events.addUserLoaded(this._start);\n        this._userManager.events.addUserUnloaded(this._stop);\n\n        this._init().catch((err: unknown) => {\n            // catch to suppress errors since we're in a ctor\n            this._logger.error(err);\n        });\n    }\n\n    protected async _init(): Promise<void> {\n        this._logger.create(\"_init\");\n        const user = await this._userManager.getUser();\n        // doing this manually here since calling getUser\n        // doesn't trigger load event.\n        if (user) {\n            void this._start(user);\n        }\n        else if (this._userManager.settings.monitorAnonymousSession) {\n            const session = await this._userManager.querySessionStatus();\n            if (session) {\n                const tmpUser = {\n                    session_state: session.session_state,\n                    profile: session.sub && session.sid ? {\n                        sub: session.sub,\n                        sid: session.sid,\n                    } : null,\n                };\n                void this._start(tmpUser);\n            }\n        }\n    }\n\n    protected _start = async (\n        user: User | {\n            session_state: string;\n            profile: { sub: string; sid: string } | null;\n        },\n    ): Promise<void> => {\n        const session_state = user.session_state;\n        if (!session_state) {\n            return;\n        }\n        const logger = this._logger.create(\"_start\");\n\n        if (user.profile) {\n            this._sub = user.profile.sub;\n            this._sid = user.profile.sid;\n            logger.debug(\"session_state\", session_state, \", sub\", this._sub);\n        }\n        else {\n            this._sub = undefined;\n            this._sid = undefined;\n            logger.debug(\"session_state\", session_state, \", anonymous user\");\n        }\n\n        if (this._checkSessionIFrame) {\n            this._checkSessionIFrame.start(session_state);\n            return;\n        }\n\n        try {\n            const url = await this._userManager.metadataService.getCheckSessionIframe();\n            if (url) {\n                logger.debug(\"initializing check session iframe\");\n\n                const client_id = this._userManager.settings.client_id;\n                const intervalInSeconds = this._userManager.settings.checkSessionIntervalInSeconds;\n                const stopOnError = this._userManager.settings.stopCheckSessionOnError;\n\n                const checkSessionIFrame = new CheckSessionIFrame(this._callback, client_id, url, intervalInSeconds, stopOnError);\n                await checkSessionIFrame.load();\n                this._checkSessionIFrame = checkSessionIFrame;\n                checkSessionIFrame.start(session_state);\n            }\n            else {\n                logger.warn(\"no check session iframe found in the metadata\");\n            }\n        }\n        catch (err) {\n            // catch to suppress errors since we're in non-promise callback\n            logger.error(\"Error from getCheckSessionIframe:\", err instanceof Error ? err.message : err);\n        }\n    };\n\n    protected _stop = (): void => {\n        const logger = this._logger.create(\"_stop\");\n        this._sub = undefined;\n        this._sid = undefined;\n\n        if (this._checkSessionIFrame) {\n            this._checkSessionIFrame.stop();\n        }\n\n        if (this._userManager.settings.monitorAnonymousSession) {\n            // using a timer to delay re-initialization to avoid race conditions during signout\n            // TODO rewrite to use promise correctly\n            // eslint-disable-next-line @typescript-eslint/no-misused-promises\n            const timerHandle = setInterval(async () => {\n                clearInterval(timerHandle);\n\n                try {\n                    const session = await this._userManager.querySessionStatus();\n                    if (session) {\n                        const tmpUser = {\n                            session_state: session.session_state,\n                            profile: session.sub && session.sid ? {\n                                sub: session.sub,\n                                sid: session.sid,\n                            } : null,\n                        };\n                        void this._start(tmpUser);\n                    }\n                }\n                catch (err) {\n                    // catch to suppress errors since we're in a callback\n                    logger.error(\"error from querySessionStatus\", err instanceof Error ? err.message : err);\n                }\n            }, 1000);\n        }\n    };\n\n    protected _callback = async (): Promise<void> => {\n        const logger = this._logger.create(\"_callback\");\n        try {\n            const session = await this._userManager.querySessionStatus();\n            let raiseEvent = true;\n\n            if (session && this._checkSessionIFrame) {\n                if (session.sub === this._sub) {\n                    raiseEvent = false;\n                    this._checkSessionIFrame.start(session.session_state);\n\n                    if (session.sid === this._sid) {\n                        logger.debug(\"same sub still logged in at OP, restarting check session iframe; session_state\", session.session_state);\n                    }\n                    else {\n                        logger.debug(\"same sub still logged in at OP, session state has changed, restarting check session iframe; session_state\", session.session_state);\n                        this._userManager.events._raiseUserSessionChanged();\n                    }\n                }\n                else {\n                    logger.debug(\"different subject signed into OP\", session.sub);\n                }\n            }\n            else {\n                logger.debug(\"subject no longer signed into OP\");\n            }\n\n            if (raiseEvent) {\n                if (this._sub) {\n                    this._userManager.events._raiseUserSignedOut();\n                }\n                else {\n                    this._userManager.events._raiseUserSignedIn();\n                }\n            } else {\n                logger.debug(\"no change in session detected, no event to raise\");\n            }\n        }\n        catch (err) {\n            if (this._sub) {\n                logger.debug(\"Error calling queryCurrentSigninSession; raising signed out event\", err);\n                this._userManager.events._raiseUserSignedOut();\n            }\n        }\n    };\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport type { IdTokenClaims } from \"./Claims\";\n\n/**\n * Holds claims represented by a combination of the `id_token` and the user info endpoint.\n * @public\n */\nexport type UserProfile = IdTokenClaims;\n\n/**\n * @public\n */\nexport class User {\n    /**\n     * A JSON Web Token (JWT). Only provided if `openid` scope was requested.\n     * The application can access the data decoded by using the `profile` property.\n     */\n    public id_token?: string;\n\n    /** The session state value returned from the OIDC provider. */\n    public session_state: string | null;\n\n    /**\n     * The requested access token returned from the OIDC provider. The application can use this token to\n     * authenticate itself to the secured resource.\n     */\n    public access_token: string;\n\n    /**\n     * An OAuth 2.0 refresh token. The app can use this token to acquire additional access tokens after the\n     * current access token expires. Refresh tokens are long-lived and can be used to maintain access to resources\n     * for extended periods of time.\n     */\n    public refresh_token?: string;\n\n    /** Typically \"Bearer\" */\n    public token_type: string;\n\n    /** The scopes that the requested access token is valid for. */\n    public scope?: string;\n\n    /** The claims represented by a combination of the `id_token` and the user info endpoint. */\n    public profile: UserProfile;\n\n    /** The expires at returned from the OIDC provider. */\n    public expires_at?: number;\n\n    /** custom state data set during the initial signin request */\n    public readonly state: unknown;\n\n    public constructor(args: {\n        id_token?: string;\n        session_state?: string | null;\n        access_token: string;\n        refresh_token?: string;\n        token_type: string;\n        scope?: string;\n        profile: UserProfile;\n        expires_at?: number;\n        userState?: unknown;\n    }) {\n        this.id_token = args.id_token;\n        this.session_state = args.session_state ?? null;\n        this.access_token = args.access_token;\n        this.refresh_token = args.refresh_token;\n\n        this.token_type = args.token_type;\n        this.scope = args.scope;\n        this.profile = args.profile;\n        this.expires_at = args.expires_at;\n        this.state = args.userState;\n    }\n\n    /** Computed number of seconds the access token has remaining. */\n    public get expires_in(): number | undefined {\n        if (this.expires_at === undefined) {\n            return undefined;\n        }\n        return this.expires_at - Timer.getEpochTime();\n    }\n\n    public set expires_in(value: number | undefined) {\n        if (value !== undefined) {\n            this.expires_at = Math.floor(value) + Timer.getEpochTime();\n        }\n    }\n\n    /** Computed value indicating if the access token is expired. */\n    public get expired(): boolean | undefined {\n        const expires_in = this.expires_in;\n        if (expires_in === undefined) {\n            return undefined;\n        }\n        return expires_in <= 0;\n    }\n\n    /** Array representing the parsed values from the `scope`. */\n    public get scopes(): string[] {\n        return this.scope?.split(\" \") ?? [];\n    }\n\n    public toStorageString(): string {\n        new Logger(\"User\").create(\"toStorageString\");\n        return JSON.stringify({\n            id_token: this.id_token,\n            session_state: this.session_state,\n            access_token: this.access_token,\n            refresh_token: this.refresh_token,\n            token_type: this.token_type,\n            scope: this.scope,\n            profile: this.profile,\n            expires_at: this.expires_at,\n        });\n    }\n\n    public static fromStorageString(storageString: string): User {\n        Logger.createStatic(\"User\", \"fromStorageString\");\n        return new User(JSON.parse(storageString));\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Event, Logger, UrlUtils } from \"../utils\";\nimport type { IWindow, NavigateParams, NavigateResponse } from \"./IWindow\";\n\nconst messageSource = \"oidc-client\";\n\ninterface MessageData {\n    source: string;\n    url: string;\n    keepOpen: boolean;\n}\n\n/**\n * Window implementation which resolves via communication from a child window\n * via the `Window.postMessage()` interface.\n *\n * @internal\n */\nexport abstract class AbstractChildWindow implements IWindow {\n    protected abstract readonly _logger: Logger;\n    protected readonly _abort = new Event<[reason: Error]>(\"Window navigation aborted\");\n    protected readonly _disposeHandlers = new Set<() => void>();\n\n    protected _window: WindowProxy | null = null;\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"navigate\");\n        if (!this._window) {\n            throw new Error(\"Attempted to navigate on a disposed window\");\n        }\n\n        logger.debug(\"setting URL in window\");\n        this._window.location.replace(params.url);\n\n        const { url, keepOpen } = await new Promise<MessageData>((resolve, reject) => {\n            const listener = (e: MessageEvent) => {\n                const data: MessageData | undefined = e.data;\n                const origin = params.scriptOrigin ?? window.location.origin;\n                if (e.origin !== origin || data?.source !== messageSource) {\n                    // silently discard events not intended for us\n                    return;\n                }\n                try {\n                    const state = UrlUtils.readParams(data.url, params.response_mode).get(\"state\");\n                    if (!state) {\n                        logger.warn(\"no state found in response url\");\n                    }\n                    if (e.source !== this._window && state !== params.state) {\n                        // MessageEvent source is a relatively modern feature, we can't rely on it\n                        // so we also inspect the payload for a matching state key as an alternative\n                        return;\n                    }\n                }\n                catch (err) {\n                    this._dispose();\n                    reject(new Error(\"Invalid response from window\"));\n                }\n                resolve(data);\n            };\n            window.addEventListener(\"message\", listener, false);\n            this._disposeHandlers.add(() => window.removeEventListener(\"message\", listener, false));\n            this._disposeHandlers.add(this._abort.addHandler((reason) => {\n                this._dispose();\n                reject(reason);\n            }));\n        });\n        logger.debug(\"got response from window\");\n        this._dispose();\n\n        if (!keepOpen) {\n            this.close();\n        }\n\n        return { url };\n    }\n\n    public abstract close(): void;\n\n    private _dispose(): void {\n        this._logger.create(\"_dispose\");\n\n        for (const dispose of this._disposeHandlers) {\n            dispose();\n        }\n        this._disposeHandlers.clear();\n    }\n\n    protected static _notifyParent(parent: Window, url: string, keepOpen = false, targetOrigin = window.location.origin): void {\n        parent.postMessage({\n            source: messageSource,\n            url,\n            keepOpen,\n        } as MessageData, targetOrigin);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { OidcClientSettings, OidcClientSettingsStore } from \"./OidcClientSettings\";\nimport type { PopupWindowFeatures } from \"./utils/PopupUtils\";\nimport { WebStorageStateStore } from \"./WebStorageStateStore\";\nimport { InMemoryWebStorage } from \"./InMemoryWebStorage\";\n\nexport const DefaultPopupWindowFeatures: PopupWindowFeatures = {\n    location: false,\n    toolbar: false,\n    height: 640,\n};\nexport const DefaultPopupTarget = \"_blank\";\nconst DefaultAccessTokenExpiringNotificationTimeInSeconds = 60;\nconst DefaultCheckSessionIntervalInSeconds = 2;\nexport const DefaultSilentRequestTimeoutInSeconds = 10;\n\n/**\n * The settings used to configure the {@link UserManager}.\n *\n * @public\n */\nexport interface UserManagerSettings extends OidcClientSettings {\n    /** The URL for the page containing the call to signinPopupCallback to handle the callback from the OIDC/OAuth2 */\n    popup_redirect_uri?: string;\n    popup_post_logout_redirect_uri?: string;\n    /**\n     * The features parameter to window.open for the popup signin window. By default, the popup is\n     * placed centered in front of the window opener.\n     * (default: \\{ location: false, menubar: false, height: 640 \\})\n     */\n    popupWindowFeatures?: PopupWindowFeatures;\n    /** The target parameter to window.open for the popup signin window (default: \"_blank\") */\n    popupWindowTarget?: string;\n    /** The methods window.location method used to redirect (default: \"assign\") */\n    redirectMethod?: \"replace\" | \"assign\";\n    /** The methods target window being redirected (default: \"self\") */\n    redirectTarget?: \"top\" | \"self\";\n\n    /** The target to pass while calling postMessage inside iframe for callback (default: window.location.origin) */\n    iframeNotifyParentOrigin?: string;\n\n    /** The script origin to check during 'message' callback execution while performing silent auth via iframe (default: window.location.origin) */\n    iframeScriptOrigin?: string;\n\n    /** The URL for the page containing the code handling the silent renew */\n    silent_redirect_uri?: string;\n    /** Number of seconds to wait for the silent renew to return before assuming it has failed or timed out (default: 10) */\n    silentRequestTimeoutInSeconds?: number;\n    /** Flag to indicate if there should be an automatic attempt to renew the access token prior to its expiration (default: true) */\n    automaticSilentRenew?: boolean;\n    /** Flag to validate user.profile.sub in silent renew calls (default: true) */\n    validateSubOnSilentRenew?: boolean;\n    /** Flag to control if id_token is included as id_token_hint in silent renew calls (default: false) */\n    includeIdTokenInSilentRenew?: boolean;\n\n    /** Will raise events for when user has performed a signout at the OP (default: false) */\n    monitorSession?: boolean;\n    monitorAnonymousSession?: boolean;\n    /** Interval in seconds to check the user's session (default: 2) */\n    checkSessionIntervalInSeconds?: number;\n    query_status_response_type?: string;\n    stopCheckSessionOnError?: boolean;\n\n    /**\n     * The `token_type_hint`s to pass to the authority server by default (default: [\"access_token\", \"refresh_token\"])\n     *\n     * Token types will be revoked in the same order as they are given here.\n     */\n    revokeTokenTypes?: (\"access_token\" | \"refresh_token\")[];\n    /** Will invoke the revocation endpoint on signout if there is an access token for the user (default: false) */\n    revokeTokensOnSignout?: boolean;\n    /** The number of seconds before an access token is to expire to raise the accessTokenExpiring event (default: 60) */\n    accessTokenExpiringNotificationTimeInSeconds?: number;\n\n    /**\n     * Storage object used to persist User for currently authenticated user (default: window.sessionStorage, InMemoryWebStorage iff no window).\n     *  E.g. `userStore: new WebStorageStateStore({ store: window.localStorage })`\n     */\n    userStore?: WebStorageStateStore;\n}\n\n/**\n * The settings with defaults applied of the {@link UserManager}.\n * @see {@link UserManagerSettings}\n *\n * @public\n */\nexport class UserManagerSettingsStore extends OidcClientSettingsStore {\n    public readonly popup_redirect_uri: string;\n    public readonly popup_post_logout_redirect_uri: string | undefined;\n    public readonly popupWindowFeatures: PopupWindowFeatures;\n    public readonly popupWindowTarget: string;\n    public readonly redirectMethod: \"replace\" | \"assign\";\n    public readonly redirectTarget: \"top\" | \"self\";\n\n    public readonly iframeNotifyParentOrigin: string | undefined;\n    public readonly iframeScriptOrigin: string | undefined;\n\n    public readonly silent_redirect_uri: string;\n    public readonly silentRequestTimeoutInSeconds: number;\n    public readonly automaticSilentRenew: boolean;\n    public readonly validateSubOnSilentRenew: boolean;\n    public readonly includeIdTokenInSilentRenew: boolean;\n\n    public readonly monitorSession: boolean;\n    public readonly monitorAnonymousSession: boolean;\n    public readonly checkSessionIntervalInSeconds: number;\n    public readonly query_status_response_type: string;\n    public readonly stopCheckSessionOnError: boolean;\n\n    public readonly revokeTokenTypes: (\"access_token\" | \"refresh_token\")[];\n    public readonly revokeTokensOnSignout: boolean;\n    public readonly accessTokenExpiringNotificationTimeInSeconds: number;\n\n    public readonly userStore: WebStorageStateStore;\n\n    public constructor(args: UserManagerSettings) {\n        const {\n            popup_redirect_uri = args.redirect_uri,\n            popup_post_logout_redirect_uri = args.post_logout_redirect_uri,\n            popupWindowFeatures = DefaultPopupWindowFeatures,\n            popupWindowTarget = DefaultPopupTarget,\n            redirectMethod = \"assign\",\n            redirectTarget = \"self\",\n\n            iframeNotifyParentOrigin = args.iframeNotifyParentOrigin,\n            iframeScriptOrigin = args.iframeScriptOrigin,\n\n            silent_redirect_uri = args.redirect_uri,\n            silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,\n            automaticSilentRenew = true,\n            validateSubOnSilentRenew = true,\n            includeIdTokenInSilentRenew = false,\n\n            monitorSession = false,\n            monitorAnonymousSession = false,\n            checkSessionIntervalInSeconds = DefaultCheckSessionIntervalInSeconds,\n            query_status_response_type = \"code\",\n            stopCheckSessionOnError = true,\n\n            revokeTokenTypes = [\"access_token\", \"refresh_token\"],\n            revokeTokensOnSignout = false,\n            accessTokenExpiringNotificationTimeInSeconds = DefaultAccessTokenExpiringNotificationTimeInSeconds,\n\n            userStore,\n        } = args;\n\n        super(args);\n\n        this.popup_redirect_uri = popup_redirect_uri;\n        this.popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;\n        this.popupWindowFeatures = popupWindowFeatures;\n        this.popupWindowTarget = popupWindowTarget;\n        this.redirectMethod = redirectMethod;\n        this.redirectTarget = redirectTarget;\n\n        this.iframeNotifyParentOrigin = iframeNotifyParentOrigin;\n        this.iframeScriptOrigin = iframeScriptOrigin;\n\n        this.silent_redirect_uri = silent_redirect_uri;\n        this.silentRequestTimeoutInSeconds = silentRequestTimeoutInSeconds;\n        this.automaticSilentRenew = automaticSilentRenew;\n        this.validateSubOnSilentRenew = validateSubOnSilentRenew;\n        this.includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;\n\n        this.monitorSession = monitorSession;\n        this.monitorAnonymousSession = monitorAnonymousSession;\n        this.checkSessionIntervalInSeconds = checkSessionIntervalInSeconds;\n        this.stopCheckSessionOnError = stopCheckSessionOnError;\n        this.query_status_response_type = query_status_response_type;\n\n        this.revokeTokenTypes = revokeTokenTypes;\n        this.revokeTokensOnSignout = revokeTokensOnSignout;\n        this.accessTokenExpiringNotificationTimeInSeconds = accessTokenExpiringNotificationTimeInSeconds;\n\n        if (userStore) {\n            this.userStore = userStore;\n        }\n        else {\n            const store = typeof window !== \"undefined\" ? window.sessionStorage : new InMemoryWebStorage();\n            this.userStore = new WebStorageStateStore({ store });\n        }\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport { ErrorTimeout } from \"../errors\";\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\nimport { DefaultSilentRequestTimeoutInSeconds } from \"../UserManagerSettings\";\n\n/**\n * @public\n */\nexport interface IFrameWindowParams {\n    silentRequestTimeoutInSeconds?: number;\n}\n\n/**\n * @internal\n */\nexport class IFrameWindow extends AbstractChildWindow {\n    protected readonly _logger = new Logger(\"IFrameWindow\");\n    private _frame: HTMLIFrameElement | null;\n    private _timeoutInSeconds: number;\n\n    public constructor({\n        silentRequestTimeoutInSeconds = DefaultSilentRequestTimeoutInSeconds,\n    }: IFrameWindowParams) {\n        super();\n        this._timeoutInSeconds = silentRequestTimeoutInSeconds;\n\n        this._frame = IFrameWindow.createHiddenIframe();\n        this._window = this._frame.contentWindow;\n    }\n\n    private static createHiddenIframe(): HTMLIFrameElement {\n        const iframe = window.document.createElement(\"iframe\");\n\n        // shotgun approach\n        iframe.style.visibility = \"hidden\";\n        iframe.style.position = \"fixed\";\n        iframe.style.left = \"-1000px\";\n        iframe.style.top = \"0\";\n        iframe.width = \"0\";\n        iframe.height = \"0\";\n        iframe.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin allow-forms\");\n\n        window.document.body.appendChild(iframe);\n        return iframe;\n    }\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        this._logger.debug(\"navigate: Using timeout of:\", this._timeoutInSeconds);\n        const timer = setTimeout(() => this._abort.raise(new ErrorTimeout(\"IFrame timed out without a response\")), this._timeoutInSeconds * 1000);\n        this._disposeHandlers.add(() => clearTimeout(timer));\n\n        return await super.navigate(params);\n    }\n\n    public close(): void {\n        if (this._frame) {\n            if (this._frame.parentNode) {\n                this._frame.addEventListener(\"load\", (ev) => {\n                    const frame = ev.target as HTMLIFrameElement;\n                    frame.parentNode?.removeChild(frame);\n                    this._abort.raise(new Error(\"IFrame removed from DOM\"));\n                }, true);\n                this._frame.contentWindow?.location.replace(\"about:blank\");\n            }\n            this._frame = null;\n        }\n        this._window = null;\n    }\n\n    public static notifyParent(url: string, targetOrigin?: string): void {\n        return super._notifyParent(window.parent, url, false, targetOrigin);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\nimport { IFrameWindow, IFrameWindowParams } from \"./IFrameWindow\";\nimport type { INavigator } from \"./INavigator\";\n\n/**\n * @internal\n */\nexport class IFrameNavigator implements INavigator {\n    private readonly _logger = new Logger(\"IFrameNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        silentRequestTimeoutInSeconds = this._settings.silentRequestTimeoutInSeconds,\n    }: IFrameWindowParams): Promise<IFrameWindow> {\n        return new IFrameWindow({ silentRequestTimeoutInSeconds });\n    }\n\n    public async callback(url: string): Promise<void> {\n        this._logger.create(\"callback\");\n        IFrameWindow.notifyParent(url, this._settings.iframeNotifyParentOrigin);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, PopupUtils, PopupWindowFeatures } from \"../utils\";\nimport { DefaultPopupWindowFeatures, DefaultPopupTarget } from \"../UserManagerSettings\";\nimport { AbstractChildWindow } from \"./AbstractChildWindow\";\nimport type { NavigateParams, NavigateResponse } from \"./IWindow\";\n\nconst checkForPopupClosedInterval = 500;\n\n/**\n * @public\n */\nexport interface PopupWindowParams {\n    popupWindowFeatures?: PopupWindowFeatures;\n    popupWindowTarget?: string;\n}\n\n/**\n * @internal\n */\nexport class PopupWindow extends AbstractChildWindow {\n    protected readonly _logger = new Logger(\"PopupWindow\");\n\n    protected _window: WindowProxy | null;\n\n    public constructor({\n        popupWindowTarget = DefaultPopupTarget,\n        popupWindowFeatures = {},\n    }: PopupWindowParams) {\n        super();\n        const centeredPopup = PopupUtils.center({ ...DefaultPopupWindowFeatures, ...popupWindowFeatures });\n        this._window = window.open(undefined, popupWindowTarget, PopupUtils.serialize(centeredPopup));\n    }\n\n    public async navigate(params: NavigateParams): Promise<NavigateResponse> {\n        this._window?.focus();\n\n        const popupClosedInterval = setInterval(() => {\n            if (!this._window || this._window.closed) {\n                this._abort.raise(new Error(\"Popup closed by user\"));\n            }\n        }, checkForPopupClosedInterval);\n        this._disposeHandlers.add(() => clearInterval(popupClosedInterval));\n\n        return await super.navigate(params);\n    }\n\n    public close(): void {\n        if (this._window) {\n            if (!this._window.closed) {\n                this._window.close();\n                this._abort.raise(new Error(\"Popup closed\"));\n            }\n        }\n        this._window = null;\n    }\n\n    public static notifyOpener(url: string, keepOpen: boolean): void {\n        if (!window.opener) {\n            throw new Error(\"No window.opener. Can't complete notification.\");\n        }\n        return super._notifyParent(window.opener, url, keepOpen);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport { PopupWindow, PopupWindowParams } from \"./PopupWindow\";\nimport type { INavigator } from \"./INavigator\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\n\n/**\n * @internal\n */\nexport class PopupNavigator implements INavigator {\n    private readonly _logger = new Logger(\"PopupNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        popupWindowFeatures = this._settings.popupWindowFeatures,\n        popupWindowTarget = this._settings.popupWindowTarget,\n    }: PopupWindowParams): Promise<PopupWindow> {\n        return new PopupWindow({ popupWindowFeatures, popupWindowTarget });\n    }\n\n    public async callback(url: string, keepOpen = false): Promise<void> {\n        this._logger.create(\"callback\");\n\n        PopupWindow.notifyOpener(url, keepOpen);\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger } from \"../utils\";\nimport type { UserManagerSettingsStore } from \"../UserManagerSettings\";\nimport type { INavigator } from \"./INavigator\";\nimport type { IWindow } from \"./IWindow\";\n\n/**\n * @public\n */\nexport interface RedirectParams {\n    redirectMethod?: \"replace\" | \"assign\";\n    redirectTarget?: \"top\" | \"self\";\n}\n\n/**\n * @internal\n */\nexport class RedirectNavigator implements INavigator {\n    private readonly _logger = new Logger(\"RedirectNavigator\");\n\n    constructor(private _settings: UserManagerSettingsStore) {}\n\n    public async prepare({\n        redirectMethod = this._settings.redirectMethod,\n        redirectTarget = this._settings.redirectTarget,\n    }: RedirectParams): Promise<IWindow> {\n        this._logger.create(\"prepare\");\n        let targetWindow = window.self as Window;\n\n        if (redirectTarget === \"top\") {\n            targetWindow = window.top ?? window.self;\n        }\n    \n        const redirect = targetWindow.location[redirectMethod].bind(targetWindow.location) as (url: string) => never;\n        let abort: (reason: Error) => void;\n        return {\n            navigate: async (params): Promise<never> => {\n                this._logger.create(\"navigate\");\n                // We use a promise that never resolves to block the caller\n                const promise = new Promise((resolve, reject) => {\n                    abort = reject;\n                });\n                redirect(params.url);\n                return await (promise as Promise<never>);\n            },\n            close: () => {\n                this._logger.create(\"close\");\n                abort?.(new Error(\"Redirect aborted\"));\n                targetWindow.stop();\n            },\n        };\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Event } from \"./utils\";\nimport { AccessTokenEvents } from \"./AccessTokenEvents\";\nimport type { UserManagerSettingsStore } from \"./UserManagerSettings\";\nimport type { User } from \"./User\";\n\n/**\n * @public\n */\nexport type UserLoadedCallback = (user: User) => Promise<void> | void;\n/**\n * @public\n */\nexport type UserUnloadedCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type SilentRenewErrorCallback = (error: Error) => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSignedInCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSignedOutCallback = () => Promise<void> | void;\n/**\n * @public\n */\nexport type UserSessionChangedCallback = () => Promise<void> | void;\n\n/**\n * @public\n */\nexport class UserManagerEvents extends AccessTokenEvents {\n    protected readonly _logger = new Logger(\"UserManagerEvents\");\n\n    private readonly _userLoaded = new Event<[User]>(\"User loaded\");\n    private readonly _userUnloaded = new Event<[]>(\"User unloaded\");\n    private readonly _silentRenewError = new Event<[Error]>(\"Silent renew error\");\n    private readonly _userSignedIn = new Event<[]>(\"User signed in\");\n    private readonly _userSignedOut = new Event<[]>(\"User signed out\");\n    private readonly _userSessionChanged = new Event<[]>(\"User session changed\");\n\n    public constructor(settings: UserManagerSettingsStore) {\n        super({ expiringNotificationTimeInSeconds: settings.accessTokenExpiringNotificationTimeInSeconds });\n    }\n\n    public load(user: User, raiseEvent=true): void {\n        super.load(user);\n        if (raiseEvent) {\n            this._userLoaded.raise(user);\n        }\n    }\n    public unload(): void {\n        super.unload();\n        this._userUnloaded.raise();\n    }\n\n    /**\n     * Add callback: Raised when a user session has been established (or re-established).\n     */\n    public addUserLoaded(cb: UserLoadedCallback): () => void {\n        return this._userLoaded.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when a user session has been established (or re-established).\n     */\n    public removeUserLoaded(cb: UserLoadedCallback): void {\n        return this._userLoaded.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised when a user session has been terminated.\n     */\n    public addUserUnloaded(cb: UserUnloadedCallback): () => void {\n        return this._userUnloaded.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when a user session has been terminated.\n     */\n    public removeUserUnloaded(cb: UserUnloadedCallback): void {\n        return this._userUnloaded.removeHandler(cb);\n    }\n\n    /**\n     * Add callback: Raised when the automatic silent renew has failed.\n     */\n    public addSilentRenewError(cb: SilentRenewErrorCallback): () => void {\n        return this._silentRenewError.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the automatic silent renew has failed.\n     */\n    public removeSilentRenewError(cb: SilentRenewErrorCallback): void {\n        return this._silentRenewError.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseSilentRenewError(e: Error): void {\n        this._silentRenewError.raise(e);\n    }\n\n    /**\n     * Add callback: Raised when the user is signed in (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSignedIn(cb: UserSignedInCallback): () => void {\n        return this._userSignedIn.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user is signed in (when `monitorSession` is set).\n     */\n    public removeUserSignedIn(cb: UserSignedInCallback): void {\n        this._userSignedIn.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseUserSignedIn(): void {\n        this._userSignedIn.raise();\n    }\n\n    /**\n     * Add callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSignedOut(cb: UserSignedOutCallback): () => void {\n        return this._userSignedOut.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user's sign-in status at the OP has changed (when `monitorSession` is set).\n     */\n    public removeUserSignedOut(cb: UserSignedOutCallback): void {\n        this._userSignedOut.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseUserSignedOut(): void {\n        this._userSignedOut.raise();\n    }\n\n    /**\n     * Add callback: Raised when the user session changed (when `monitorSession` is set).\n     * @see {@link UserManagerSettings.monitorSession}\n     */\n    public addUserSessionChanged(cb: UserSessionChangedCallback): () => void {\n        return this._userSessionChanged.addHandler(cb);\n    }\n    /**\n     * Remove callback: Raised when the user session changed (when `monitorSession` is set).\n     */\n    public removeUserSessionChanged(cb: UserSessionChangedCallback): void {\n        this._userSessionChanged.removeHandler(cb);\n    }\n    /**\n     * @internal\n     */\n    public _raiseUserSessionChanged(): void {\n        this._userSessionChanged.raise();\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { Logger, Timer } from \"./utils\";\nimport { ErrorTimeout } from \"./errors\";\nimport type { UserManager } from \"./UserManager\";\nimport type { AccessTokenCallback } from \"./AccessTokenEvents\";\n\n/**\n * @internal\n */\nexport class SilentRenewService {\n    protected _logger = new Logger(\"SilentRenewService\");\n    private _isStarted = false;\n    private readonly _retryTimer = new Timer(\"Retry Silent Renew\");\n\n    public constructor(private _userManager: UserManager) {}\n\n    public async start(): Promise<void> {\n        const logger = this._logger.create(\"start\");\n        if (!this._isStarted) {\n            this._isStarted = true;\n            this._userManager.events.addAccessTokenExpiring(this._tokenExpiring);\n            this._retryTimer.addHandler(this._tokenExpiring);\n\n            // this will trigger loading of the user so the expiring events can be initialized\n            try {\n                await this._userManager.getUser();\n                // deliberate nop\n            }\n            catch (err) {\n                // catch to suppress errors since we're in a ctor\n                logger.error(\"getUser error\", err);\n            }\n        }\n    }\n\n    public stop(): void {\n        if (this._isStarted) {\n            this._retryTimer.cancel();\n            this._retryTimer.removeHandler(this._tokenExpiring);\n            this._userManager.events.removeAccessTokenExpiring(this._tokenExpiring);\n            this._isStarted = false;\n        }\n    }\n\n    protected _tokenExpiring: AccessTokenCallback = async () => {\n        const logger = this._logger.create(\"_tokenExpiring\");\n        try {\n            await this._userManager.signinSilent();\n            logger.debug(\"silent token renewal successful\");\n        }\n        catch (err) {\n            if (err instanceof ErrorTimeout) {\n                // no response from authority server, e.g. IFrame timeout, ...\n                logger.warn(\"ErrorTimeout from signinSilent:\", err, \"retry in 5s\");\n                this._retryTimer.init(5);\n                return;\n            }\n\n            logger.error(\"Error from signinSilent:\", err);\n            this._userManager.events._raiseSilentRenewError(err as Error);\n        }\n    };\n}\n", "// Copyright (C) AuthTS Contributors\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\n/**\n * Fake state store implementation necessary for validating refresh token requests.\n *\n * @internal\n */\nexport class RefreshState {\n    /** custom \"state\", which can be used by a caller to have \"data\" round tripped */\n    public readonly data: unknown | undefined;\n\n    public readonly refresh_token: string;\n    public readonly id_token?: string;\n    public readonly session_state: string | null;\n    public readonly scope?: string;\n\n    constructor(args: {\n        refresh_token: string;\n        id_token?: string;\n        session_state: string | null;\n        scope?: string;\n        state?: unknown;\n    }) {\n        this.refresh_token = args.refresh_token;\n        this.id_token = args.id_token;\n        this.session_state = args.session_state;\n        this.scope = args.scope;\n        this.data = args.state;\n    }\n}\n", "// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.\n\nimport { JwtUtils, Logger } from \"./utils\";\nimport { ErrorResponse } from \"./errors\";\nimport { IFrameNavigator, NavigateResponse, PopupNavigator, RedirectNavigator, PopupWindowParams,\n    IWindow, IFrameWindowParams, RedirectParams } from \"./navigators\";\nimport { OidcClient, CreateSigninRequestArgs, CreateSignoutRequestArgs } from \"./OidcClient\";\nimport { UserManagerSettings, UserManagerSettingsStore } from \"./UserManagerSettings\";\nimport { User, UserProfile } from \"./User\";\nimport { UserManagerEvents } from \"./UserManagerEvents\";\nimport { SilentRenewService } from \"./SilentRenewService\";\nimport { SessionMonitor } from \"./SessionMonitor\";\nimport type { SessionStatus } from \"./SessionStatus\";\nimport type { SignoutResponse } from \"./SignoutResponse\";\nimport type { MetadataService } from \"./MetadataService\";\nimport { RefreshState } from \"./RefreshState\";\nimport type { DeviceAuthorizationRequestArgs, DeviceAuthorizationResponse } from \"./DeviceAuthorizationClient\";\n\n/**\n * @public\n */\nexport type ExtraSigninRequestArgs = Pick<CreateSigninRequestArgs, \"nonce\" | \"extraQueryParams\" | \"extraTokenParams\" | \"state\" | \"redirect_uri\" | \"prompt\">;\n/**\n * @public\n */\nexport type ExtraSignoutRequestArgs = Pick<CreateSignoutRequestArgs, \"extraQueryParams\" | \"state\" | \"id_token_hint\" | \"post_logout_redirect_uri\">;\n\n/**\n * @public\n */\nexport type RevokeTokensTypes = UserManagerSettings[\"revokeTokenTypes\"];\n\n/**\n * @public\n */\nexport type SigninRedirectArgs = RedirectParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninPopupArgs = PopupWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SigninSilentArgs = IFrameWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type QuerySessionStatusArgs = IFrameWindowParams & ExtraSigninRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutRedirectArgs = RedirectParams & ExtraSignoutRequestArgs;\n\n/**\n * @public\n */\nexport type SignoutPopupArgs = PopupWindowParams & ExtraSignoutRequestArgs;\n\n/**\n * Provides a higher level API for signing a user in, signing out, managing the user's claims returned from the OIDC provider,\n * and managing an access token returned from the OIDC/OAuth2 provider.\n *\n * @public\n */\nexport class UserManager {\n    /** Returns the settings used to configure the `UserManager`. */\n    public readonly settings: UserManagerSettingsStore;\n    protected readonly _logger = new Logger(\"UserManager\");\n\n    protected readonly _client: OidcClient;\n    protected readonly _redirectNavigator: RedirectNavigator;\n    protected readonly _popupNavigator: PopupNavigator;\n    protected readonly _iframeNavigator: IFrameNavigator;\n    protected readonly _events: UserManagerEvents;\n    protected readonly _silentRenewService: SilentRenewService;\n    protected readonly _sessionMonitor: SessionMonitor | null;\n\n    public constructor(settings: UserManagerSettings) {\n        this.settings = new UserManagerSettingsStore(settings);\n\n        this._client = new OidcClient(settings);\n\n        this._redirectNavigator = new RedirectNavigator(this.settings);\n        this._popupNavigator = new PopupNavigator(this.settings);\n        this._iframeNavigator = new IFrameNavigator(this.settings);\n\n        this._events = new UserManagerEvents(this.settings);\n        this._silentRenewService = new SilentRenewService(this);\n\n        // order is important for the following properties; these services depend upon the events.\n        if (this.settings.automaticSilentRenew) {\n            this.startSilentRenew();\n        }\n\n        this._sessionMonitor = null;\n        if (this.settings.monitorSession) {\n            this._sessionMonitor = new SessionMonitor(this);\n        }\n\n    }\n\n    /** Returns an object used to register for events raised by the `UserManager`. */\n    public get events(): UserManagerEvents {\n        return this._events;\n    }\n\n    /** Returns an object used to access the metadata configuration of the OIDC provider. */\n    public get metadataService(): MetadataService {\n        return this._client.metadataService;\n    }\n\n    /**\n     * Returns promise to load the `User` object for the currently authenticated user.\n     */\n    public async getUser(): Promise<User | null> {\n        const logger = this._logger.create(\"getUser\");\n        const user = await this._loadUser();\n        if (user) {\n            logger.info(\"user loaded\");\n            this._events.load(user, false);\n            return user;\n        }\n\n        logger.info(\"user not found in storage\");\n        return null;\n    }\n\n    /**\n     * Returns promise to remove from any storage the currently authenticated user.\n     */\n    public async removeUser(): Promise<void> {\n        const logger = this._logger.create(\"removeUser\");\n        await this.storeUser(null);\n        logger.info(\"user removed from storage\");\n        this._events.unload();\n    }\n\n    /**\n     * Returns promise to trigger a redirect of the current window to the authorization endpoint.\n     */\n    public async signinRedirect(args: SigninRedirectArgs = {}): Promise<void> {\n        this._logger.create(\"signinRedirect\");\n        const {\n            redirectMethod,\n            ...requestArgs\n        } = args;\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\n        await this._signinStart({\n            request_type: \"si:r\",\n            ...requestArgs,\n        }, handle);\n    }\n\n    /**\n     * Returns promise to process response from the authorization endpoint. The result of the promise is the authenticated `User`.\n     */\n    public async signinRedirectCallback(url = window.location.href): Promise<User> {\n        const logger = this._logger.create(\"signinRedirectCallback\");\n        const user = await this._signinEnd(url);\n        if (user.profile && user.profile.sub) {\n            logger.info(\"success, signed in subject\", user.profile.sub);\n        }\n        else {\n            logger.info(\"no subject\");\n        }\n\n        return user;\n    }\n\n    /**\n     * Returns promise to trigger a request (via a popup window) to the authorization endpoint. The result of the promise is the authenticated `User`.\n     */\n    public async signinPopup(args: SigninPopupArgs = {}): Promise<User> {\n        const logger = this._logger.create(\"signinPopup\");\n        const {\n            popupWindowFeatures,\n            popupWindowTarget,\n            ...requestArgs\n        } = args;\n        const url = this.settings.popup_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No popup_redirect_uri configured\"));\n        }\n\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget });\n        const user = await this._signin({\n            request_type: \"si:p\",\n            redirect_uri: url,\n            display: \"popup\",\n            ...requestArgs,\n        }, handle);\n        if (user) {\n            if (user.profile && user.profile.sub) {\n                logger.info(\"success, signed in subject\", user.profile.sub);\n            }\n            else {\n                logger.info(\"no subject\");\n            }\n        }\n\n        return user;\n    }\n    /**\n     * Returns promise to notify the opening window of response from the authorization endpoint.\n     */\n    public async signinPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const logger = this._logger.create(\"signinPopupCallback\");\n        await this._popupNavigator.callback(url, keepOpen);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Returns promise to trigger a silent request (via an iframe) to the authorization endpoint.\n     * The result of the promise is the authenticated `User`.\n     */\n    public async signinSilent(args: SigninSilentArgs = {}): Promise<User | null> {\n        const logger = this._logger.create(\"signinSilent\");\n        const {\n            silentRequestTimeoutInSeconds,\n            ...requestArgs\n        } = args;\n        // first determine if we have a refresh token, or need to use iframe\n        let user = await this._loadUser();\n        if (user?.refresh_token) {\n            logger.debug(\"using refresh token\");\n            const state = new RefreshState(user as Required<User>);\n            return await this._useRefreshToken(state);\n        }\n\n        const url = this.settings.silent_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\n        }\n\n        let verifySub: string | undefined;\n        if (user && this.settings.validateSubOnSilentRenew) {\n            logger.debug(\"subject prior to silent renew:\", user.profile.sub);\n            verifySub = user.profile.sub;\n        }\n\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        user = await this._signin({\n            request_type: \"si:s\",\n            redirect_uri: url,\n            prompt: \"none\",\n            id_token_hint: this.settings.includeIdTokenInSilentRenew ? user?.id_token : undefined,\n            ...requestArgs,\n        }, handle, verifySub);\n        if (user) {\n            if (user.profile?.sub) {\n                logger.info(\"success, signed in subject\", user.profile.sub);\n            }\n            else {\n                logger.info(\"no subject\");\n            }\n        }\n\n        return user;\n    }\n\n    protected async _useRefreshToken(state: RefreshState): Promise<User> {\n        const response = await this._client.useRefreshToken({\n            state,\n            timeoutInSeconds: this.settings.silentRequestTimeoutInSeconds,\n        });\n        const user = new User({ ...state, ...response });\n\n        await this.storeUser(user);\n        this._events.load(user);\n        return user;\n    }\n\n    /**\n     * Returns promise to notify the parent window of response from the authorization endpoint.\n     */\n    public async signinSilentCallback(url = window.location.href): Promise<void> {\n        const logger = this._logger.create(\"signinSilentCallback\");\n        await this._iframeNavigator.callback(url);\n        logger.info(\"success\");\n    }\n\n    public async signinCallback(url = window.location.href): Promise<User | void> {\n        const { state } = await this._client.readSigninResponseState(url);\n        switch (state.request_type) {\n            case \"si:r\":\n                return await this.signinRedirectCallback(url);\n            case \"si:p\":\n                return await this.signinPopupCallback(url);\n            case \"si:s\":\n                return await this.signinSilentCallback(url);\n            default:\n                throw new Error(\"invalid response_type in state\");\n        }\n    }\n\n    public async signoutCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const { state } = await this._client.readSignoutResponseState(url);\n        if (!state) {\n            return;\n        }\n\n        switch (state.request_type) {\n            case \"so:r\":\n                await this.signoutRedirectCallback(url);\n                break;\n            case \"so:p\":\n                await this.signoutPopupCallback(url, keepOpen);\n                break;\n            default:\n                throw new Error(\"invalid response_type in state\");\n        }\n    }\n\n    /**\n     * Returns promise to query OP for user's current signin status. Returns object with session_state and subject identifier.\n     */\n    public async querySessionStatus(args: QuerySessionStatusArgs = {}): Promise<SessionStatus | null> {\n        const logger = this._logger.create(\"querySessionStatus\");\n        const {\n            silentRequestTimeoutInSeconds,\n            ...requestArgs\n        } = args;\n        const url = this.settings.silent_redirect_uri;\n        if (!url) {\n            logger.throw(new Error(\"No silent_redirect_uri configured\"));\n        }\n\n        const handle = await this._iframeNavigator.prepare({ silentRequestTimeoutInSeconds });\n        const navResponse = await this._signinStart({\n            request_type: \"si:s\", // this acts like a signin silent\n            redirect_uri: url,\n            prompt: \"none\",\n            response_type: this.settings.query_status_response_type,\n            scope: \"openid\",\n            skipUserInfo: true,\n            ...requestArgs,\n        }, handle);\n        try {\n            const signinResponse = await this._client.processSigninResponse(navResponse.url);\n            logger.debug(\"got signin response\");\n\n            if (signinResponse.session_state && signinResponse.profile.sub) {\n                logger.info(\"success for subject\", signinResponse.profile.sub);\n                return {\n                    session_state: signinResponse.session_state,\n                    sub: signinResponse.profile.sub,\n                    sid: signinResponse.profile.sid,\n                };\n            }\n\n            logger.info(\"success, user not authenticated\");\n            return null;\n        }\n        catch (err) {\n            if (this.settings.monitorAnonymousSession && err instanceof ErrorResponse) {\n                switch (err.error) {\n                    case \"login_required\":\n                    case \"consent_required\":\n                    case \"interaction_required\":\n                    case \"account_selection_required\":\n                        logger.info(\"success for anonymous user\");\n                        return {\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            session_state: err.session_state!,\n                        };\n                }\n            }\n            throw err;\n        }\n    }\n\n    protected async _signin(args: CreateSigninRequestArgs, handle: IWindow, verifySub?: string): Promise<User> {\n        const navResponse = await this._signinStart(args, handle);\n        return await this._signinEnd(navResponse.url, verifySub);\n    }\n    protected async _signinStart(args: CreateSigninRequestArgs, handle: IWindow): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"_signinStart\");\n\n        try {\n            const signinRequest = await this._client.createSigninRequest(args);\n            logger.debug(\"got signin request\");\n\n            return await handle.navigate({\n                url: signinRequest.url,\n                state: signinRequest.state.id,\n                response_mode: signinRequest.state.response_mode,\n                scriptOrigin: this.settings.iframeScriptOrigin,\n            });\n        }\n        catch (err) {\n            logger.debug(\"error after preparing navigator, closing navigator window\");\n            handle.close();\n            throw err;\n        }\n    }\n    protected async _signinEnd(url: string, verifySub?: string): Promise<User> {\n        const logger = this._logger.create(\"_signinEnd\");\n        const signinResponse = await this._client.processSigninResponse(url);\n        logger.debug(\"got signin response\");\n\n        const user = new User(signinResponse);\n        if (verifySub) {\n            if (verifySub !== user.profile.sub) {\n                logger.debug(\"current user does not match user returned from signin. sub from signin:\", user.profile.sub);\n                throw new ErrorResponse({ ...signinResponse, error: \"login_required\" });\n            }\n            logger.debug(\"current user matches user returned from signin\");\n        }\n\n        await this.storeUser(user);\n        logger.debug(\"user stored\");\n        this._events.load(user);\n\n        return user;\n    }\n\n    /**\n     * Returns promise to trigger a redirect of the current window to the end session endpoint.\n     */\n    public async signoutRedirect(args: SignoutRedirectArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutRedirect\");\n        const {\n            redirectMethod,\n            ...requestArgs\n        } = args;\n        const handle = await this._redirectNavigator.prepare({ redirectMethod });\n        await this._signoutStart({\n            request_type: \"so:r\",\n            post_logout_redirect_uri: this.settings.post_logout_redirect_uri,\n            ...requestArgs,\n        }, handle);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Returns promise to process response from the end session endpoint.\n     */\n    public async signoutRedirectCallback(url = window.location.href): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"signoutRedirectCallback\");\n        const response = await this._signoutEnd(url);\n        logger.info(\"success\");\n        return response;\n    }\n\n    /**\n     * Returns promise to trigger a redirect of a popup window window to the end session endpoint.\n     */\n    public async signoutPopup(args: SignoutPopupArgs = {}): Promise<void> {\n        const logger = this._logger.create(\"signoutPopup\");\n        const {\n            popupWindowFeatures,\n            popupWindowTarget,\n            ...requestArgs\n        } = args;\n        const url = this.settings.popup_post_logout_redirect_uri;\n\n        const handle = await this._popupNavigator.prepare({ popupWindowFeatures, popupWindowTarget });\n        await this._signout({\n            request_type: \"so:p\",\n            post_logout_redirect_uri: url,\n            // we're putting a dummy entry in here because we\n            // need a unique id from the state for notification\n            // to the parent window, which is necessary if we\n            // plan to return back to the client after signout\n            // and so we can close the popup after signout\n            state: url == null ? undefined : {},\n            ...requestArgs,\n        }, handle);\n        logger.info(\"success\");\n    }\n\n    /**\n     * Returns promise to process response from the end session endpoint from a popup window.\n     */\n    public async signoutPopupCallback(url = window.location.href, keepOpen = false): Promise<void> {\n        const logger = this._logger.create(\"signoutPopupCallback\");\n        await this._popupNavigator.callback(url, keepOpen);\n        logger.info(\"success\");\n    }\n\n    protected async _signout(args: CreateSignoutRequestArgs, handle: IWindow): Promise<SignoutResponse> {\n        const navResponse = await this._signoutStart(args, handle);\n        return await this._signoutEnd(navResponse.url);\n    }\n    protected async _signoutStart(args: CreateSignoutRequestArgs = {}, handle: IWindow): Promise<NavigateResponse> {\n        const logger = this._logger.create(\"_signoutStart\");\n\n        try {\n            const user = await this._loadUser();\n            logger.debug(\"loaded current user from storage\");\n\n            if (this.settings.revokeTokensOnSignout) {\n                await this._revokeInternal(user);\n            }\n\n            const id_token = args.id_token_hint || user && user.id_token;\n            if (id_token) {\n                logger.debug(\"setting id_token_hint in signout request\");\n                args.id_token_hint = id_token;\n            }\n\n            await this.removeUser();\n            logger.debug(\"user removed, creating signout request\");\n\n            const signoutRequest = await this._client.createSignoutRequest(args);\n            logger.debug(\"got signout request\");\n\n            return await handle.navigate({\n                url: signoutRequest.url,\n                state: signoutRequest.state?.id,\n            });\n        }\n        catch (err) {\n            logger.debug(\"error after preparing navigator, closing navigator window\");\n            handle.close();\n            throw err;\n        }\n    }\n    protected async _signoutEnd(url: string): Promise<SignoutResponse> {\n        const logger = this._logger.create(\"_signoutEnd\");\n        const signoutResponse = await this._client.processSignoutResponse(url);\n        logger.debug(\"got signout response\");\n\n        return signoutResponse;\n    }\n\n    public async revokeTokens(types?: RevokeTokensTypes): Promise<void> {\n        const user = await this._loadUser();\n        await this._revokeInternal(user, types);\n    }\n\n    protected async _revokeInternal(user: User | null, types = this.settings.revokeTokenTypes): Promise<void> {\n        const logger = this._logger.create(\"_revokeInternal\");\n        if (!user) return;\n\n        const typesPresent = types.filter(type => typeof user[type] === \"string\");\n\n        if (!typesPresent.length) {\n            logger.debug(\"no need to revoke due to no token(s)\");\n            return;\n        }\n\n        // don't Promise.all, order matters\n        for (const type of typesPresent) {\n            await this._client.revokeToken(\n                user[type]!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n                type,\n            );\n            logger.info(`${type} revoked successfully`);\n            if (type !== \"access_token\") {\n                user[type] = null as never;\n            }\n        }\n\n        await this.storeUser(user);\n        logger.debug(\"user stored\");\n        this._events.load(user);\n    }\n\n    /**\n     * Enables silent renew for the `UserManager`.\n     */\n    public startSilentRenew(): void {\n        this._logger.create(\"startSilentRenew\");\n        void this._silentRenewService.start();\n    }\n\n    /**\n     * Disables silent renew for the `UserManager`.\n     */\n    public stopSilentRenew(): void {\n        this._silentRenewService.stop();\n    }\n\n    protected get _userStoreKey(): string {\n        return `user:${this.settings.authority}:${this.settings.client_id}`;\n    }\n\n    protected async _loadUser(): Promise<User | null> {\n        const logger = this._logger.create(\"_loadUser\");\n        const storageString = await this.settings.userStore.get(this._userStoreKey);\n        if (storageString) {\n            logger.debug(\"user storageString loaded\");\n            return User.fromStorageString(storageString);\n        }\n\n        logger.debug(\"no user storageString\");\n        return null;\n    }\n\n    public async storeUser(user: User | null): Promise<void> {\n        const logger = this._logger.create(\"storeUser\");\n        if (user) {\n            logger.debug(\"storing user\");\n            const storageString = user.toStorageString();\n            await this.settings.userStore.set(this._userStoreKey, storageString);\n        }\n        else {\n            this._logger.debug(\"removing user\");\n            await this.settings.userStore.remove(this._userStoreKey);\n        }\n    }\n\n    /**\n     * Removes stale state entries in storage for incomplete authorize requests.\n     */\n    public async clearStaleState(): Promise<void> {\n        await this._client.clearStaleState();\n    }\n\n    public async startDeviceAuthorization(args?: DeviceAuthorizationRequestArgs): Promise<DeviceAuthorizationResponse> {\n        return await this._client.startDeviceAuthorization(args ?? {});\n    }\n\n    public async waitForDeviceAuthorization(params: DeviceAuthorizationResponse): Promise<Record<string, unknown>> {\n        const res = await this._client.waitForDeviceAuthorization(params);\n        if (res.access_token) {\n            const profile = JwtUtils.decode(res.id_token as string ?? \"\") as UserProfile;\n            const user = new User({\n                profile,\n                access_token: res.access_token as string,\n                token_type: res.token_type as string,\n                id_token: res.id_token as string | undefined,\n                refresh_token: res.refresh_token as string | undefined,\n                scope: res.scope as string | undefined,\n                session_state: res.session_state as string | undefined,\n            });\n            if (typeof res.expires_in === \"number\") {\n                user.expires_in = res.expires_in;\n            }\n            await this.storeUser(user);\n            this._events.load(user);\n        }\n        return res;\n    }\n}\n", "// @ts-expect-error avoid enabling resolveJsonModule to keep build process simple\nimport { version } from \"../package.json\";\n\n/**\n * @public\n */\nexport const Version: string = version;\n"],
  "mappings": "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",
  "names": []
}
